[package]
name = "mirrord-layer"
version.workspace = true
authors.workspace = true
description.workspace = true
documentation.workspace = true
readme.workspace = true
homepage.workspace = true
repository.workspace = true
license.workspace = true
keywords.workspace = true
categories.workspace = true
publish.workspace = true
edition.workspace = true

[lints]
workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
mirrord-config = { path = "../config"}
mirrord-protocol = { path = "../protocol"}
mirrord-layer-macro = { path = "./macro"}
mirrord-console = { path = "../console" }
mirrord-intproxy-protocol = { path = "../intproxy/protocol", features = ["codec"] }

ctor = "0.2"
libc.workspace = true
bincode.workspace = true
nix = { workspace = true, features = ["net", "process", "signal"]}
tracing.workspace = true
tracing-subscriber.workspace = true
frida-gum = { version = "0.13", features = ["auto-download"] }

serde.workspace = true
serde_json.workspace = true

bytes.workspace = true
thiserror.workspace = true
hickory-resolver.workspace = true
num-traits.workspace = true

rand = "0.8"
fancy-regex.workspace = true
regex.workspace = true
errno = "0.3"
socket2.workspace = true
anyhow.workspace = true
streammap-ext.workspace = true
urlencoding = "2"
itertools = "0.13"
os_info = "3"
bytemuck = "1"
bimap.workspace = true
hashbrown = "0.14"
exec.workspace = true
syscalls = { version = "0.6", features = ["full"] }
null-terminated = "0.3"
base64.workspace = true

[target.'cfg(target_os = "macos")'.dependencies]
mirrord-sip = { path = "../sip" }

[dev-dependencies]
mirrord-intproxy = { path = "../intproxy" }
k8s-openapi.workspace = true
chrono = { version = "0.4", features = ["clock"] }
http-body = { workspace = true }
hyper = { workspace = true }
rstest = "*"
test-cdylib = "*"
tower = "0.4"
tokio = { version = "1", features = ["rt", "net", "macros"] }
tests = { path = "../../tests" }
flaky_test = "0.2"
futures.workspace = true
actix-codec.workspace = true
tokio-stream.workspace = true

[lib]
crate_type = ["cdylib"]
