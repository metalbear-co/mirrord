/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Controls whether or not mirrord accepts invalid TLS certificates (e.g. self-signed certificates).
 *
 * If not provided, mirrord will use value from the kubeconfig.
 */
export type AcceptInvalidCertificatesRootAcceptInvalidCertificates = boolean | null;
export type AgentRootAgent = AgentFileConfig | null;
/**
 * Allows setting up custom annotations for the agent Job and Pod.
 *
 * ```json { "agent": { "annotations": { "cats.io/inject": "enabled" "prometheus.io/scrape": "true", "prometheus.io/port": "9000" } } } ```
 */
export type AgentAnnotationsAgentAnnotations = {
  [k: string]: string;
} | null;
/**
 * Determine if to check whether there is room for agent job in target node. (Not applicable when using ephemeral containers feature)
 *
 * Can be disabled if the check takes too long and you are sure there is enough resources on each node
 */
export type AgentCheckOutOfPodsAgentCheckOutOfPods = boolean | null;
/**
 * Controls how long the agent lives when there are no connections.
 *
 * Each connection has its own heartbeat mechanism, so even if the local application has no messages, the agent stays alive until there are no more heartbeat messages.
 */
export type AgentCommunicationTimeoutAgentCommunicationTimeout = number | null;
/**
 * If nothing is disabled here, agent uses: 1. `NET_ADMIN`, 2. `NET_RAW` (unless `passthrough_mirroring` is enabled), 3. `SYS_PTRACE`, 4. `SYS_ADMIN`.
 *
 * Has no effect when using the targetless mode, as targetless agent containers have no capabilities.
 */
export type AgentDisabledCapabilitiesAgentDisabledCapabilities = LinuxCapability[] | null;
export type LinuxCapability = "SYS_ADMIN" | "SYS_PTRACE" | "NET_RAW" | "NET_ADMIN";
export type AgentDnsAgentDns = FileAgentDnsConfig | null;
/**
 * Specifies the number of DNS resolution attempts the agent will make before failing. Setting this too high may cause the internal proxy to time out and exit.
 */
export type AgentDnsAttemptsAgentDnsAttempts = number | null;
/**
 * Specifies how long (in seconds) the agent will wait for a DNS response before timing out. If not specified the agent uses a default value of 1 second. Setting this too high may cause the internal proxy to time out and exit.
 */
export type AgentDnsTimeoutAgentDnsTimeout = number | null;
/**
 * Runs the agent as an [ephemeral container](https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/).
 *
 * Not compatible with targetless runs.
 *
 * Defaults to `false`.
 */
export type AgentEphemeralAgentEphemeral = boolean | null;
/**
 * When running the agent as an ephemeral container, use this option to exclude the agent's port from the service mesh sidecar proxy.
 */
export type AgentExcludeFromMeshAgentExcludeFromMesh = boolean | null;
/**
 * Flushes existing connections when starting to steal, might fix issues where connections aren't stolen (due to being already established)
 *
 * Defaults to `true`.
 */
export type AgentFlushConnectionsAgentFlushConnections = boolean | null;
/**
 * Name of the agent's docker image.
 *
 * Useful when a custom build of mirrord-agent is required, or when using an internal registry.
 *
 * Defaults to the latest stable image `"ghcr.io/metalbear-co/mirrord:latest"`.
 *
 * ```json { "agent": { "image": "internal.repo/images/mirrord:latest" } } ```
 *
 * Complete setup:
 *
 * ```json { "agent": { "image": { "registry": "internal.repo/images/mirrord", "tag": "latest" } } } ```
 */
export type AgentImageAgentImage = AgentImageFileConfig | null;
/**
 * <!--${internal}--> Allows us to support the dual configuration for the agent image.
 *
 * Whatever values missing are replaced with our defaults.
 */
export type AgentImageFileConfig =
  | (string | null)
  | {
      registry?: string | null;
      tag?: string | null;
    };
/**
 * Controls when a new agent image is downloaded.
 *
 * Supports `"IfNotPresent"`, `"Always"`, `"Never"`, or any valid kubernetes [image pull policy](https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy)
 *
 * Defaults to `"IfNotPresent"`
 */
export type AgentImagePullPolicyAgentImagePullPolicy = string | null;
/**
 * List of secrets the agent pod has access to.
 *
 * Takes an array of entries with the format `{ name: <secret-name> }`.
 *
 * Read more [here](https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod).
 *
 * ```json { "agent": { "image_pull_secrets": [ { "name": "secret-key-1" }, { "name": "secret-key-2" } ] } } ```
 */
export type AgentImagePullSecretsAgentImagePullSecrets = AgentPullSecret[] | null;
/**
 * Sets whether `Mirrord-Agent` headers are injected into HTTP responses that went through the agent.
 *
 * Possible values for the header:
 *
 * - `passed-through`: set when the request was not sent to the local app (perhaps because it didn't match the filters)
 *
 * - `forwarded-to-client`: set when the request was sent to the local app
 */
export type AgentInjectHeadersAgentInjectHeaders = boolean | null;
/**
 * Controls whether the agent produces logs in a human-friendly format, or json.
 *
 * ```json { "agent": { "json_log": true } } ```
 */
export type AgentJsonLogAgentJsonLog = boolean | null;
/**
 * Allows setting up custom labels for the agent Job and Pod.
 *
 * ```json { "agent": { "labels": { "user": "meow", "state": "asleep" } } } ```
 */
export type AgentLabelsAgentLabels = {
  [k: string]: string;
} | null;
/**
 * Log level for the agent.
 *
 * Supports `"trace"`, `"debug"`, `"info"`, `"warn"`, `"error"`, or any string that would work with `RUST_LOG`.
 *
 * ```json { "agent": { "log_level": "mirrord=debug,warn" } } ```
 */
export type AgentLogLevelAgentLogLevel = string | null;
/**
 * Enables prometheus metrics for the agent pod.
 *
 * You might need to add annotations to the agent pod depending on how prometheus is configured to scrape for metrics.
 *
 * ```json { "agent": { "metrics": "0.0.0.0:9000" } } ```
 */
export type AgentMetricsAgentMetrics = string | null;
/**
 * Namespace where the agent shall live.
 *
 * **Note:** ignored in targetless runs or when the agent is run as an ephemeral container.
 *
 * Defaults to the current kubernetes namespace.
 */
export type AgentNamespaceAgentNamespace = string | null;
/**
 * Which network interface to use for mirroring.
 *
 * The default behavior is try to access the internet and use that interface. If that fails it uses `eth0`.
 */
export type AgentNetworkInterfaceAgentNetworkInterface = string | null;
/**
 * Determines which iptables backend will be used for traffic redirection.
 *
 * If set to `true`, the agent will use iptables-nft. If set to `false`, the agent will use iptables-legacy. If not set, the agent will try to detect the correct backend at runtime.
 */
export type AgentNftablesAgentNftables = boolean | null;
/**
 * Allows setting up custom node selector for the agent Pod. Applies only to targetless runs, as targeted agent always runs on the same node as its target container.
 *
 * ```json { "agent": { "node_selector": { "kubernetes.io/hostname": "node1" } } } ```
 */
export type AgentNodeSelectorAgentNodeSelector = {
  [k: string]: string;
} | null;
/**
 * Enables an implementation of traffic mirroring based on iptables redirects.
 *
 * When used with `agent.flush_connections`, it might fix issues with mirroring non HTTP/1 traffic.
 *
 * When this is set, `network_interface` setting is ignored.
 *
 * Defaults to true.
 */
export type AgentPassthroughMirroringAgentPassthroughMirroring = boolean | null;
/**
 * Specifies the priority class to assign to the agent pod.
 *
 * This option is only applicable when running in the targetless mode.
 *
 * ```json { "agent": { "priority_class": "my-priority-class-name" } } ```
 *
 * In some cases, the targetless agent pod may fail to schedule due to node resource constraints. Setting a priority class allows you to explicitly assign an existing priority class from your cluster to the agent pod, increasing its priority relative to other workloads.
 */
export type AgentPriorityClassAgentPriorityClass = string | null;
/**
 * Run the mirror agent as privileged container. Defaults to `false`.
 *
 * Might be needed in strict environments such as Bottlerocket.
 *
 * Has no effect when using the targetless mode, as targetless agent containers are never privileged.
 */
export type AgentPrivilegedAgentPrivileged = boolean | null;
/**
 * Set pod resource requirements. (not with ephemeral agents) Default is ```json { "agent": { "resources": { "requests": { "cpu": "1m", "memory": "1Mi" }, "limits": { "cpu": "100m", "memory": "100Mi" } } } } ```
 */
export type AgentResourcesAgentResources = IoK8SApiCoreV1 | null;
/**
 * Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
 *
 * The serialization format is:
 *
 * ``` <quantity>        ::= <signedNumber><suffix>
 *
 * 	(Note that <suffix> may be empty, from the "" case in <decimalSI>.)
 *
 * <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
 *
 * 	(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
 *
 * <decimalSI>       ::= m | "" | k | M | G | T | P | E
 *
 * 	(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
 *
 * <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```
 *
 * No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
 *
 * When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
 *
 * Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
 *
 * - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.
 *
 * The sign will be omitted unless the number is negative.
 *
 * Examples:
 *
 * - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"
 *
 * Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
 *
 * Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
 *
 * This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
 */
export type IoK8SApimachineryPkgApiResourceQuantity = string;
/**
 * Allows setting up custom Service Account for the agent Job and Pod.
 *
 * ```json { "agent": { "service_account": "my-service-account" } } ```
 */
export type AgentServiceAccountAgentServiceAccount = string | null;
/**
 * Controls how long to wait for the agent to finish initialization.
 *
 * If initialization takes longer than this value, mirrord exits.
 *
 * Defaults to `60`.
 */
export type AgentStartupTimeoutAgentStartupTimeout = number | null;
/**
 * Set pod tolerations. (not with ephemeral agents).
 *
 * Defaults to `operator: Exists`.
 *
 * ```json { "agent": { "tolerations": [ { "key": "meow", "operator": "Exists", "effect": "NoSchedule" } ] } } ```
 *
 * Set to an empty array to have no tolerations at all
 */
export type AgentTolerationsAgentTolerations = IoK8SApiCoreV12[] | null;
/**
 * Controls how long the agent pod persists for after the agent exits (in seconds).
 *
 * Can be useful for collecting logs.
 *
 * Defaults to `1`.
 */
export type AgentTtlAgentTtl = number | null;
export type ContainerRootContainer = ContainerFileConfig | null;
/**
 * Any extra args to use when creating the sidecar mirrord-cli container.
 *
 * This is useful when you want to use portforwarding, passing `-p local:container` won't work for main command but adding them here will work ```json { "container": { "cli_extra_args": ["-p", "local:container"] } } ```
 */
export type ContainerCliExtraArgsContainerCliExtraArgs = string[] | null;
/**
 * Tag of the `mirrord-cli` image you want to use.
 *
 * Defaults to `"ghcr.io/metalbear-co/mirrord-cli:<cli version>"`.
 */
export type ContainerCliImageContainerCliImage = string | null;
/**
 * Path of the mirrord-layer lib inside the specified mirrord-cli image.
 */
export type ContainerCliImageLibPathContainerCliImage = string | null;
/**
 * Don't add `--rm` to sidecar command to prevent cleanup.
 */
export type ContainerCliPreventCleanupContainerCliExtraArgs = boolean | null;
/**
 * When using`mirrord container` with external_proxy TLS enabled (is enabled by default), you can specify the path where the certificate `.pem` file will be created, in the cli container.
 *
 * Defaults to `"/opt/mirrord/tls/mirrord-tls.pem"`.
 */
export type ContainerCliTlsPathContainerCliTlsPath = string | null;
/**
 * Allows to override the IP address for the internal proxy to use when connecting to the host machine from within the container.
 *
 * ```json5 { "container": { "override_host_ip": "172.17.0.1" // usual resolution of value from `host.docker.internal` } } ```
 *
 * This should be useful if your host machine is exposed with a different IP address than the one bound as host.
 *
 * - If you're running inside WSL, and encountering problems, try setting `external_proxy.host_ip` T `0.0.0.0`, and this to the internal container runtime address (for docker, this  would be what `host.docker.internal` resolved to, which by default is `192.168.65.254`). You can find this ip by resolving it from inside a running container, e.g. `docker run --rm -it {image-with-nslookup} nslookup host.docker.internal`
 */
export type ContainerOverrideHostIpContainerOverrideHostIp = string | null;
/**
 * Platform specification for the target container (e.g., "linux/amd64", "linux/arm64").
 *
 * When specified, the target container will run with this platform, while the internal proxy container will still run on the native platform and contain both architectures (x64/arm64). The LD_PRELOAD will automatically use the correct architecture.
 *
 * ```json { "container": { "platform": "linux/amd64" } } ```
 */
export type ContainerPlatformContainerPlatform = string | null;
export type ExperimentalRootExperimental = ExperimentalFileConfig | null;
/**
 * mirrord will open a URL for initiating mirrord browser extension to automatically inject HTTP header that matches the HTTP filter configured in `feature.network.incoming.http_filter.header_filter`.
 */
export type _Experimental_BrowserExtensionConfigExperimentalBrowserExtensionConfig = boolean | null;
/**
 * Disables the `SO_REUSEADDR` socket option on sockets that mirrord steals/mirrors. On macOS the application can use the same address many times but then we don't steal it correctly. This probably should be on by default but we want to gradually roll it out. <https://github.com/metalbear-co/mirrord/issues/2819> This option applies only on macOS.
 */
export type _Experimental_DisableReuseaddrExperimentalDisableReuseaddr = boolean | null;
/**
 * Whether to terminate the session when a permission denied error occurs during DNS resolution. This error often means that the Kubernetes cluster is hardened, and the mirrord-agent is not fully functional without `agent.privileged` enabled.
 *
 * Defaults to `true` in OSS. Defaults to `false` in mfT.
 */
export type _Experimental_DnsPermissionErrorFatalExperimentalDnsPermissionErrorFatal = boolean | null;
/**
 * Enables exec hooks on Linux. Enable Linux hooks can fix issues when the application shares sockets with child commands (e.g Python web servers with reload), but the feature is not stable and may cause other issues.
 */
export type _Experimental_EnableExecHooksLinuxExperimentalEnableExecHooksLinux = boolean | null;
/**
 * Forces hooking all instances of the connect function. In very niche cases the connect function has multiple exports and this flag makes us hook all of the instances. <https://linear.app/metalbear/issue/MBE-1385/mirrord-container-curl-doesnt-work-for-php-curl>
 */
export type _Experimental_ForceHookConnectExperimentalForceHookConnect = boolean | null;
/**
 * Enables `getifaddrs` hook that removes IPv6 interfaces from the list returned by libc.
 */
export type _Experimental_HideIpv6InterfacesExperimentalHideIpv6Interfaces = boolean | null;
/**
 * Enables hooking the `rename` function.
 *
 * Useful if you need file remapping and your application uses `rename`, i.e. `php-fpm`, `twig`, to create and rename temporary files.
 */
export type _Experimental_HookRenameExperimentalHookRename = boolean | null;
/**
 * Sets a timeout for idle local HTTP connections (in milliseconds).
 *
 * HTTP requests stolen with a filter are delivered to the local application from a HTTP connection made from the local machine. Once a request is delivered, the connection is cached for some time, so that it can be reused to deliver the next request.
 *
 * This timeout determines for how long such connections are cached.
 *
 * Set to 0 to disable caching local HTTP connections (connections will be dropped as soon as the request is delivered).
 *
 * Defaults to 3000ms.
 */
export type _Experimental_IdleLocalHttpConnectionTimeoutExperimentalIdleLocalHttpConnectionTimeout = number | null;
/**
 * Disables any system wide proxy configuration for affecting the running application.
 */
export type _Experimental_IgnoreSystemProxyConfigExperimentalIgnoreSystemProxyConfig = boolean | null;
/**
 * Enables better support for outgoing connections using non-blocking TCP sockets.
 */
export type _Experimental_NonBlockingTcpConnectExperimentalNonBlockingTcpConnect = boolean | null;
/**
 * DEPRECATED, WILL BE REMOVED
 */
export type _Experimental_ReadlinkExperimentalReadlink = boolean | null;
/**
 * DEPRECATED, WILL BE REMOVED: moved to `feature.fs.readonly_file_buffer` as part of stabilisation. See <https://github.com/metalbear-co/mirrord/issues/2069>.
 */
export type _Experimental_ReadonlyFileBufferExperimentalReadonlyFileBuffer = number | null;
/**
 * Writes basic fork-safe SIP patching logs to a destination file. Useful for seeing the state of SIP when `stdout` may be affected by another process.
 */
export type _Experimental_SipLogDestinationExperimentalSipLogDestination = string | null;
/**
 * <https://github.com/metalbear-co/mirrord/issues/2421#issuecomment-2093200904>
 */
export type _Experimental_TcpPing4MockExperimentalTcpPing4Mock = boolean | null;
/**
 * Enables trusting any certificate on macOS, useful for <https://github.com/golang/go/issues/51991#issuecomment-2059588252>
 */
export type _Experimental_TrustAnyCertificateExperimentalTrustAnyCertificate = boolean | null;
/**
 * Uses /dev/null for creating local fake files (should be better than using /tmp)
 */
export type _Experimental_UseDevNullExperimentalUseDevNull = boolean | null;
/**
 * Enables vfork emulation within the mirrord-layer. Might solve rare stack corruption issues.
 *
 * Note that for Go applications on ARM64, this feature is not yet supported, and this setting is ignored.
 */
export type _Experimental_VforkEmulationExperimentalVforkEmulation = boolean | null;
export type ExternalProxyRootExternalProxy = ExternalProxyFileConfig | null;
/**
 * Specify a custom host ip addr to listen on.
 *
 * This address must be accessible from within the container. If not specified, mirrord will try and resolve a local address to use.
 *
 * - If you're running inside WSL, and encountering problems, try setting this to `0.0.0.0`, and `container.override_host_ip` to the internal container runtime address (for docker, this would be what `host.docker.internal` resolved to, which by default is `192.168.65.254`).
 */
export type ExternalProxyHostIpExternalProxyHostIp = string | null;
/**
 * How much time to wait while we don't have any active connections before exiting.
 *
 * Common cases would be running a chain of processes that skip using the layer and don't connect to the proxy.
 *
 * ```json { "external_proxy": { "idle_timeout": 30 } } ```
 */
export type ExternalProxyIdleTimeoutExternalProxyIdleTimeout = number | null;
/**
 * Whether the proxy should output logs in JSON format. If false, logs are output in human-readable format.
 *
 * Defaults to true.
 */
export type ExternalProxyJsonLogExternalProxyJsonLog = boolean | null;
/**
 * Set the log file destination for the external proxy.
 *
 * Defaults to a randomized path inside the temporary directory.
 */
export type ExternalProxyLogDestinationExternalProxyLogDestination = string | null;
/**
 * Set the log level for the external proxy.
 *
 * The value should follow the RUST_LOG convention (i.e `mirrord=trace`).
 *
 * Defaults to `mirrord=info,warn`.
 */
export type ExternalProxyLogLevelExternalProxyLogLevel = string | null;
/**
 * How much time to wait for the first connection to the external proxy in seconds.
 *
 * Common cases would be running with dlv or any other debugger, which sets a breakpoint on process execution, delaying the layer startup and connection to the external proxy.
 *
 * ```json { "external_proxy": { "start_idle_timeout": 60 } } ```
 */
export type ExternalProxyStartIdleTimeoutExternalProxyStartIdleTimeout = number | null;
export type FeatureRootFeature = FeatureFileConfig | null;
/**
 * Creates a new copy of the target. mirrord will use this copy instead of the original target (e.g. intercept network traffic). This feature requires a [mirrord operator](https://metalbear.com/mirrord/docs/overview/teams/?utm_source=copytarget).
 *
 * This feature is not compatible with rollout targets and running without a target (`targetless` mode).
 */
export type FeatureCopyTargetFeatureCopyTarget = FeatureCopyTargetCopyTarget | null;
/**
 * Allows the user to target a pod created dynamically from the original [`target`](#target). The new pod inherits most of the original target's specification, e.g. labels.
 *
 * See the [copy target reference](https://metalbear.com/mirrord/docs/reference/copy-target/) for more details.
 *
 * ### Minimal `copy_target` config {#copy_target-minimal}
 *
 * ```json { "feature": { "copy_target": true } } ```
 *
 * ### Advanced `copy_target` config {#copy_target-advanced}
 *
 * ```json { "feature": { "copy_target": { "enabled": true, "scale_down": true, "exclude_containers": ["my-container"], "exclude_init_containers": ["my-init-container"] } } } ```
 */
export type FeatureCopyTargetCopyTarget =
  | boolean
  | {
      /**
       * Whether copy target is enabled
       */
      enabled?: boolean | null;
      /**
       * List of containers to be ignored by copy_target
       */
      exclude_containers?: string[] | null;
      /**
       * List of init containers to be ignored by copy_target
       */
      exclude_init_containers?: string[] | null;
      /**
       * Scale down the target deployment to 0 for the time the copied pod is alive
       */
      scale_down?: boolean | null;
    };
/**
 * Configuration for the database branching feature.
 */
export type FeatureDbBranchesFeatureDbBranches = DatabaseBranchesConfig | null;
/**
 * Configuration for a database branch.
 *
 * Example:
 *
 * ```json { "id": "my-branch-db", "name": "my-database-name", "ttl_secs": 120, "type": "mysql", "version": "8.0", "connection": { "url": { "type": "env", "variable": "DB_CONNECTION_URL" } } } ```
 */
export type DatabaseBranchConfig = {
  connection: FeatureDbBranchesBaseConnectionFeatureDbBranchesBaseConnection;
  id?: FeatureDbBranchesBaseIdFeatureDbBranchesBaseId;
  name?: FeatureDbBranchesBaseNameFeatureDbBranchesBaseName;
  ttl_secs?: FeatureDbBranchesBaseTtlSecsFeatureDbBranchesBaseTtlSecs;
  type: "mysql";
  version?: FeatureDbBranchesBaseVersionFeatureDbBranchesBaseVersion;
  [k: string]: unknown;
};
/**
 * `connection` describes how to get the connection information to the source database. When the branch database is ready for use, Mirrord operator will replace the connection information with the branch database's.
 */
export type FeatureDbBranchesBaseConnectionFeatureDbBranchesBaseConnection = DbBranchingConnectionSource;
/**
 * Different ways of connecting to the source database.
 *
 * Example:
 *
 * A single complete connection URL stored in an environment variable accessible from the target pod template.
 *
 * ```json { "url": { "type": "env", "variable": "DB_CONNECTION_URL" } } ```
 */
export type DbBranchingConnectionSource = {
  url: DbBranchingConnectionSourceKind;
};
/**
 * Different ways to source the connection options.
 */
export type DbBranchingConnectionSourceKind = {
  container?: string | null;
  type: "env";
  variable: string;
  [k: string]: unknown;
};
/**
 * Users can choose to specify a unique `id`. This is useful for reusing or sharing the same database branch among Kubernetes users.
 */
export type FeatureDbBranchesBaseIdFeatureDbBranchesBaseId = string | null;
/**
 * When source database connection detail is not accessible to mirrord operator, users can specify the database `name` so it is included in the connection options mirrord uses as the override.
 */
export type FeatureDbBranchesBaseNameFeatureDbBranchesBaseName = string | null;
/**
 * Mirrord operator starts counting the TTL when a branch is no longer used by any session. The time-to-live (TTL) for the branch database is set to 300 seconds by default. Users can set `ttl_secs` to customize this value according to their need. Please note that longer TTL paired with frequent mirrord session turnover can result in increased resource usage. For this reason, branch database TTL caps out at 15 min.
 */
export type FeatureDbBranchesBaseTtlSecsFeatureDbBranchesBaseTtlSecs = number;
/**
 * Mirrord operator uses a default version of the database image unless `version` is given.
 */
export type FeatureDbBranchesBaseVersionFeatureDbBranchesBaseVersion = string | null;
/**
 * A list of configurations for database branches.
 *
 * ```json { "feature": { "db_branches": [ { "name": "my-database-name", "ttl_secs": 120, "type": "mysql", "version": "8.0", "connection": { "url": { "type": "env", "variable": "DB_CONNECTION_URL" } } } ] } } ```
 */
export type DatabaseBranchesConfig = DatabaseBranchConfig[];
export type FeatureEnvFeatureEnv = ToggleableConfigFor_EnvFileConfig | null;
export type ToggleableConfigFor_EnvFileConfig = boolean | EnvFileConfig;
/**
 * Allows for passing environment variables from an env file.
 *
 * These variables will override environment fetched from the remote target.
 */
export type FeatureEnvFileFeatureEnvFile = string | null;
/**
 * Include the remote environment variables in the local process that are **NOT** specified by this option. Variable names can be matched using `*` and `?` where `?` matches exactly one occurrence of any character and `*` matches arbitrary many (including zero) occurrences of any character.
 *
 * Some of the variables that are excluded by default: `PATH`, `HOME`, `HOMEPATH`, `CLASSPATH`, `JAVA_EXE`, `JAVA_HOME`, `PYTHONPATH`.
 *
 * Can be passed as a list or as a semicolon-delimited string (e.g. `"VAR;OTHER_VAR"`).
 */
export type FeatureEnvExcludeFeatureEnvExclude = VecOrSingleFor_String | null;
export type VecOrSingleFor_String = string | string[];
/**
 * Include only these remote environment variables in the local process. Variable names can be matched using `*` and `?` where `?` matches exactly one occurrence of any character and `*` matches arbitrary many (including zero) occurrences of any character.
 *
 * Can be passed as a list or as a semicolon-delimited string (e.g. `"VAR;OTHER_VAR"`).
 *
 * Some environment variables are excluded by default (`PATH` for example), including these requires specifying them with `include`
 */
export type FeatureEnvIncludeFeatureEnvInclude = VecOrSingleFor_String | null;
/**
 * Allows for changing the way mirrord loads remote environment variables. If set, the variables are fetched after the user application is started.
 *
 * This setting is meant to resolve issues when using mirrord via the IntelliJ plugin on WSL and the remote environment contains a lot of variables.
 */
export type FeatureEnvLoadFromProcessFeatureEnvLoadFromProcess = boolean | null;
/**
 * Specify map of patterns that if matched will replace the value according to specification.
 *
 * *Capture groups are allowed.*
 *
 * Example: ```json { ".+_TIMEOUT": "10000" "LOG_.+_VERBOSITY": "debug" "(\w+)_(\d+)": "magic-value" } ```
 *
 * Will do the next replacements for environment variables that match:
 *
 * * `CONNECTION_TIMEOUT: 500` => `CONNECTION_TIMEOUT: 10000`
 *
 * * `LOG_FILE_VERBOSITY: info` => `LOG_FILE_VERBOSITY: debug`
 *
 * * `DATA_1234: common-value` => `DATA_1234: magic-value`
 */
export type FeatureEnvMappingFeatureEnvMapping = {
  [k: string]: string;
} | null;
/**
 * Allows setting or overriding environment variables (locally) with a custom value.
 *
 * For example, if the remote pod has an environment variable `REGION=1`, but this is an undesirable value, it's possible to use `override` to set `REGION=2` (locally) instead.
 *
 * Environment specified here will also override variables passed via the env file.
 */
export type FeatureEnvOverrideFeatureEnvOverride = {
  [k: string]: string;
} | null;
/**
 * Allows unsetting environment variables in the executed process.
 *
 * This is useful for when some system/user-defined environment like `AWS_PROFILE` make the application behave as if it's running locally, instead of using the remote settings. The unsetting happens from extension (if possible)/CLI and when process initializes. In some cases, such as Go the env might not be able to be modified from the process itself. This is case insensitive, meaning if you'd put `AWS_PROFILE` it'd unset both `AWS_PROFILE` and `Aws_Profile` and other variations.
 */
export type FeatureEnvUnsetFeatureEnvUnset = VecOrSingleFor_String | null;
export type FeatureFsFeatureFs = ToggleableConfigFor_FsUserConfig | null;
export type ToggleableConfigFor_FsUserConfig = boolean | FeatureFsFs;
/**
 * Changes file operations behavior based on user configuration.
 *
 * See the file operations [reference](https://metalbear.com/mirrord/docs/reference/fileops/) for more details, and [fs advanced](#fs-advanced) for more information on how to fully setup mirrord file operations.
 *
 * ### Minimal `fs` config {#fs-minimal}
 *
 * ```json { "feature": { "fs": "read" } } ```
 *
 * ### Advanced `fs` config {#fs-advanced}
 *
 * ```json { "feature": { "fs": { "mode": "write", "read_write": ".+\\.json" , "read_only": [ ".+\\.yaml", ".+important-file\\.txt" ], "local": [ ".+\\.js", ".+\\.mjs" ] } } } ```
 */
export type FeatureFsFs = FsModeConfig | AdvancedFsUserConfig;
/**
 * Configuration for enabling read-only or read-write file operations.
 *
 * These options are overriden by user specified overrides and mirrord default overrides.
 *
 * If you set [`"localwithoverrides"`](#feature-fs-mode-localwithoverrides) then some files can be read/write remotely based on our default/user specified. Default option for general file configuration.
 *
 * The accepted values are: `"local"`, `"localwithoverrides`, `"read"`, or `"write`.
 */
export type FsModeConfig =
  | FeatureFsModeLocalFeatureFsModeLocal
  | FeatureFsModeLocalwithoverridesFeatureFsModeLocalwithoverrides
  | FeatureFsModeReadFeatureFsModeRead
  | FeatureFsModeWriteFeatureFsModeWrite;
/**
 * mirrord won't do anything fs-related, all operations will be local.
 */
export type FeatureFsModeLocalFeatureFsModeLocal = "local";
/**
 * mirrord will run overrides on some file operations, but most will be local.
 */
export type FeatureFsModeLocalwithoverridesFeatureFsModeLocalwithoverrides = "localwithoverrides";
/**
 * mirrord will read files from the remote, but won't write to them.
 */
export type FeatureFsModeReadFeatureFsModeRead = "read";
/**
 * mirrord will read/write from the remote.
 */
export type FeatureFsModeWriteFeatureFsModeWrite = "write";
/**
 * Specify file path patterns that if matched will be opened locally.
 */
export type FeatureFsLocalFeatureFsLocal = VecOrSingleFor_String | null;
/**
 * Specify map of patterns that if matched will replace the path according to specification.
 *
 * *Capture groups are allowed.*
 *
 * Example: ```json { "^/home/(?<user>\\S+)/dev/tomcat": "/etc/tomcat" "^/home/(?<user>\\S+)/dev/config/(?<app>\\S+)": "/mnt/configs/${user}-$app" } ``` Will do the next replacements for any io operaton
 *
 * `/home/johndoe/dev/tomcat/context.xml` => `/etc/tomcat/context.xml` `/home/johndoe/dev/config/api/app.conf` => `/mnt/configs/johndoe-api/app.conf`
 *
 * - Relative paths: this feature (currently) does not apply mappings to relative paths, e.g. `../dev`.
 */
export type FeatureFsMappingFeatureFsMapping = {
  [k: string]: string;
} | null;
export type FeatureFsModeFeatureFsMode = FsModeConfig | null;
/**
 * Specify file path patterns that if matched will be treated as non-existent.
 */
export type FeatureFsNotFoundFeatureFsNotFound = VecOrSingleFor_String | null;
/**
 * Specify file path patterns that if matched will be read from the remote. if file matching the pattern is opened for writing or read/write it will be opened locally.
 */
export type FeatureFsReadOnlyFeatureFsReadOnly = VecOrSingleFor_String | null;
/**
 * Specify file path patterns that if matched will be read and written to the remote.
 */
export type FeatureFsReadWriteFeatureFsReadWrite = VecOrSingleFor_String | null;
/**
 * Sets buffer size for read-only remote files in bytes. By default, the value is 128000 bytes, or 128 kB.
 *
 * Setting the value to 0 disables file buffering. Otherwise, read-only remote files will be read in chunks and buffered locally. This improves performance when the user application reads data in small portions.
 */
export type FeatureFsReadonlyFileBufferFeatureFsReadonlyFileBuffer = number | null;
/**
 * Should mirrord return the hostname of the target pod when calling `gethostname`
 */
export type FeatureHostnameFeatureHostname = boolean | null;
export type FeatureNetworkFeatureNetwork = ToggleableConfigFor_NetworkFileConfig | null;
export type ToggleableConfigFor_NetworkFileConfig = boolean | NetworkFileConfig;
export type FeatureNetworkDnsFeatureNetworkDns = ToggleableConfigFor_DnsFileConfig | null;
export type ToggleableConfigFor_DnsFileConfig = boolean | DnsFileConfig;
/**
 * Unstable: the precise syntax of this config is subject to change.
 */
export type FeatureNetworkDnsFilterFeatureNetworkDnsFilter = DnsFilterConfig | null;
/**
 * List of addresses/ports/subnets that should be resolved through either the remote pod or local app, depending how you set this up with either `remote` or `local`.
 *
 * You may use this option to specify when DNS resolution is done from the remote pod (which is the default behavior when you enable remote DNS), or from the local app (default when you have remote DNS disabled).
 *
 * Takes a list of values, such as:
 *
 * - Only queries for hostname `my-service-in-cluster` will go through the remote pod.
 *
 * ```json { "remote": ["my-service-in-cluster"] } ```
 *
 * - Only queries for addresses in subnet `1.1.1.0/24` with service port `1337`` will go through the remote pod.
 *
 * ```json { "remote": ["1.1.1.0/24:1337"] } ```
 *
 * - Only queries for hostname `google.com` with service port `1337` or `7331` will go through the remote pod.
 *
 * ```json { "remote": ["google.com:1337", "google.com:7331"] } ```
 *
 * - Only queries for `localhost` with service port `1337` will go through the local app.
 *
 * ```json { "local": ["localhost:1337"] } ```
 *
 * - Only queries with service port `1337` or `7331` will go through the local app.
 *
 * ```json { "local": [":1337", ":7331"] } ```
 *
 * Valid values follow this pattern: `[name|address|subnet/mask][:port]`.
 */
export type DnsFilterConfig =
  | {
      remote: VecOrSingleFor_String;
    }
  | {
      local: VecOrSingleFor_String;
    };
export type FeatureNetworkIncomingFeatureNetworkIncoming = ToggleableConfigFor_IncomingFileConfig | null;
export type ToggleableConfigFor_IncomingFileConfig = boolean | IncomingNetwork;
/**
 * Controls the incoming TCP traffic feature.
 *
 * See the incoming [reference](https://metalbear.com/mirrord/docs/reference/traffic/#incoming) for more details.
 *
 * Incoming traffic supports 2 modes of operation:
 *
 * 1. Mirror (**default**): Sniffs the TCP data from a port, and forwards a copy to the interested listeners;
 *
 * 2. Steal: Captures the TCP data from a port, and forwards it to the local process, see [`steal`](##steal);
 *
 * ### Minimal `incoming` config
 *
 * ```json { "feature": { "network": { "incoming": "steal" } } } ```
 *
 * ### Advanced `incoming` config
 *
 * ```json { "feature": { "network": { "incoming": { "mode": "steal", "http_filter": { "header_filter": "host: api\\..+" }, "port_mapping": [[ 7777, 8888 ]], "ignore_localhost": false, "ignore_ports": [9999, 10000], "listen_ports": [[80, 8111]] } } } } ```
 */
export type IncomingNetwork = (IncomingMode | null) | IncomingAdvancedSetup;
/**
 * Allows selecting between mirrorring or stealing traffic.
 *
 * Can be set to either `"mirror"` (default), `"steal"` or `"off"`.
 *
 * - `"mirror"`: Sniffs on TCP port, and send a copy of the data to listeners. - `"off"`: Disables the incoming network feature. - `"steal"`: Supports 2 modes of operation:
 *
 * 1. Port traffic stealing: Steals all TCP data from a port, which is selected whenever the user listens in a TCP socket (enabling the feature is enough to make this work, no additional configuration is needed);
 *
 * 2. HTTP traffic stealing: Steals only HTTP traffic, mirrord tries to detect if the incoming data on a port is HTTP (in a best-effort kind of way, not guaranteed to be HTTP), and steals the traffic on the port if it is HTTP;
 */
export type IncomingMode = "mirror" | "steal" | "off";
/**
 * Sets up the HTTP traffic filter (currently, only useful when `incoming: steal`).
 *
 * See [`filter`](##filter) for details.
 */
export type HTTPFilter = ToggleableConfigFor_HttpFilterFileConfig | null;
export type ToggleableConfigFor_HttpFilterFileConfig = boolean | HttpFilterFileConfig;
/**
 * An array of HTTP filters.
 *
 * Each inner filter specifies either header or path regex. Requests must match all of the filters to be stolen.
 *
 * Cannot be an empty list.
 *
 * Example: ```json { "all_of": [ { "header": "x-user: my-user$" }, { "path": "^/api/v1/my-endpoint" } { "method": "post" } ] } ```
 */
export type FeatureNetworkIncomingHttpFilterAllOfFeatureNetworkIncomingHttpFilterAllOf = InnerFilter[] | null;
export type InnerFilter =
  | FeatureNetworkIncomingInnerFilterHeaderFilterFeatureNetworkIncomingInnerHeaderFilter
  | FeatureNetworkIncomingInnerFilterPathFilterFeatureNetworkIncomingInnerPathFilter
  | {
      method: string;
      [k: string]: unknown;
    };
/**
 * An array of HTTP filters.
 *
 * Each inner filter specifies either header or path regex. Requests must match at least one of the filters to be stolen.
 *
 * Cannot be an empty list.
 *
 * Example: ```json { "any_of": [ { "header": "^x-user: my-user$" }, { "path": "^/api/v1/my-endpoint" } { "method": "post" } ] } ```
 */
export type FeatureNetworkIncomingHttpFilterAnyOfFeatureNetworkIncomingHttpFilterAnyOf = InnerFilter[] | null;
/**
 * Supports regexes validated by the [`fancy-regex`](https://docs.rs/fancy-regex/latest/fancy_regex/) crate.
 *
 * The HTTP traffic feature converts the HTTP headers to `HeaderKey: HeaderValue`, case-insensitive.
 */
export type FeatureNetworkIncomingHttpFilterHeaderFilterFeatureNetworkIncomingHttpHeaderFilter = string | null;
/**
 * Supports standard [HTTP methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Methods), and non-standard HTTP methods.
 *
 * Case-insensitive. If the request method matches the filter, the request is stolen.
 */
export type FeatureNetworkIncomingHttpFilterMethodFilterFeatureNetworkIncomingHttpMethodFilter = string | null;
/**
 * Supports regexes validated by the [`fancy-regex`](https://docs.rs/fancy-regex/latest/fancy_regex/) crate.
 *
 * Case-insensitive. Tries to find match in the path (without query) and path+query. If any of the two matches, the request is stolen.
 */
export type FeatureNetworkIncomingHttpFilterPathFilterFeatureNetworkIncomingHttpPathFilter = string | null;
/**
 * Activate the HTTP traffic filter only for these ports.
 *
 * Other ports will *not* be stolen, unless listed in [`feature.network.incoming.ports`](#feature-network-incoming-ports).
 *
 * We check the pod's health probe ports and automatically add them here, as they're usually the same ports your app might be listening on. If your app ports and the health probe ports don't match, then setting this option will override this behavior.
 *
 * Set to [80, 8080] by default.
 */
export type FeatureNetworkIncomingHttpFilterPortsFeatureNetworkIncomingHttpFilterPorts = PortList | null;
/**
 * <!--${internal}--> Helper struct for setting up ports configuration (part of the HTTP traffic stealer feature).
 *
 * Defaults to a list of ports `[80, 8080]`.
 *
 * We use this to allow implementing a custom [`Default`] initialization, as the [`MirrordConfig`] macro (currently) doesn't support more intricate expressions.
 */
export type PortList = VecOrSingleForUint16;
export type VecOrSingleForUint16 = number | number[];
/**
 * DEPRECATED: use `tls_delivery` instead.
 */
export type HttpsDelivery = LocalTlsDelivery | null;
/**
 * Protocol to use when delivering the TLS traffic locally.
 */
export type FeatureNetworkIncomingTlsDeliveryProtocolFeatureNetworkIncomingTlsDeliveryProtocol = TlsDeliveryProtocol;
export type TlsDeliveryProtocol = "tcp" | "tls";
/**
 * Server name to use when making a connection.
 *
 * Must be a valid DNS name or an IP address.
 */
export type FeatureNetworkIncomingTlsDeliveryServerNameFeatureNetworkIncomingTlsDeliveryServerName = string | null;
/**
 * Paths to PEM files and directories with PEM files containing allowed root certificates.
 *
 * Directories are not traversed recursively.
 *
 * Each certificate found in the files is treated as an allowed root. The files can contain entries of other types, e.g private keys, which are ignored.
 */
export type FeatureNetworkIncomingTlsDeliveryTrustRootsFeatureNetworkIncomingTlsDeliveryTrustRoots = string[] | null;
/**
 * Consider removing when adding <https://github.com/metalbear-co/mirrord/issues/702>
 */
export type IgnoreLocalhost = boolean | null;
/**
 * Ports to ignore when mirroring/stealing traffic. Useful if you want specific ports to be used locally only.
 *
 * Mutually exclusive with [`ports`](###ports).
 */
export type IgnorePorts = number[] | null;
/**
 * Mapping for local ports to actually used local ports. When application listens on a port while steal/mirror is active we fallback to random ports to avoid port conflicts. Using this configuration will always use the specified port. If this configuration doesn't exist, mirrord will try to listen on the original port and if it fails it will assign a random port
 *
 * This is useful when you want to access ports exposed by your service locally For example, if you have a service that listens on port `80` and you want to access it, you probably can't listen on `80` without sudo, so you can use `[[80, 4480]]` then access it on `4480` while getting traffic from remote `80`. The value of `port_mapping` doesn't affect this.
 */
export type ListenPorts = [number, number][] | null;
/**
 * Allows selecting between mirrorring or stealing traffic.
 *
 * See [`mode`](##mode (incoming)) for details.
 */
export type Mode = IncomingMode | null;
/**
 * (Operator Only): if value of override will force close any other connections on requested target
 */
export type OnConcurrentSteal = ConcurrentSteal | null;
/**
 * (Operator Only): Allows overriding port locks
 *
 * Can be set to either `"continue"` or `"override"`.
 *
 * - `"continue"`: Continue with normal execution - `"override"`: If port lock detected then override it with new lock and force close the original locking connection.
 */
export type ConcurrentSteal = "override" | "continue" | "abort";
/**
 * Mapping for local ports to remote ports.
 *
 * This is useful when you want to mirror/steal a port to a different port on the remote machine. For example, your local process listens on port `9333` and the container listens on port `80`. You'd use `[[9333, 80]]`
 */
export type PortMapping = [number, number][] | null;
/**
 * List of ports to mirror/steal traffic from. Other ports will remain local.
 *
 * Mutually exclusive with [`ignore_ports`](###ignore_ports).
 */
export type Ports = number[] | null;
/**
 * (Operator Only): configures how mirrord delivers stolen TLS traffic to the local application.
 */
export type TlsDelivery = LocalTlsDelivery | null;
/**
 * Enable ipv6 support. Turn on if your application listens to incoming traffic over IPv6, or connects to other services over IPv6.
 */
export type FeatureNetworkIpv6FeatureNetworkIpv6 = boolean | null;
export type FeatureNetworkOutgoingFeatureNetworkOutgoing = ToggleableConfigFor_OutgoingFileConfig | null;
export type ToggleableConfigFor_OutgoingFileConfig = boolean | OutgoingFileConfig;
/**
 * Filters that are used to send specific traffic from either the remote pod or the local app
 */
export type FeatureNetworkOutgoingFilterFeatureNetworkOutgoingFilter = OutgoingFilterConfig | null;
/**
 * List of addresses/ports/subnets that should be sent through either the remote pod or local app, depending how you set this up with either `remote` or `local`.
 *
 * You may use this option to specify when outgoing traffic is sent from the remote pod (which is the default behavior when you enable outgoing traffic), or from the local app (default when you have outgoing traffic disabled).
 *
 * Takes a list of values, such as:
 *
 * - Only UDP traffic on subnet `1.1.1.0/24` on port 1337 will go through the remote pod.
 *
 * ```json { "remote": ["udp://1.1.1.0/24:1337"] } ```
 *
 * - Only UDP and TCP traffic on resolved address of `google.com` on port `1337` and `7331` will go through the remote pod. ```json { "remote": ["google.com:1337", "google.com:7331"] } ```
 *
 * - Only TCP traffic on `localhost` on port 1337 will go through the local app, the rest will be emmited remotely in the cluster.
 *
 * ```json { "local": ["tcp://localhost:1337"] } ```
 *
 * - Only outgoing traffic on port `1337` and `7331` will go through the local app. ```json { "local": [":1337", ":7331"] } ```
 *
 * Valid values follow this pattern: `[protocol]://[name|address|subnet/mask]:[port]`.
 */
export type OutgoingFilterConfig =
  | {
      remote: VecOrSingleFor_String;
    }
  | {
      local: VecOrSingleFor_String;
    };
/**
 * Defaults to `false`.
 */
export type FeatureNetworkOutgoingIgnoreLocalhostFeatureNetworkOutgoingIgnoreLocalhost = boolean | null;
/**
 * Defaults to `true`.
 */
export type FeatureNetworkOutgoingTcpFeatureNetworkOutgoingTcp = boolean | null;
/**
 * Defaults to `true`.
 */
export type FeatureNetworkOutgoingUdpFeatureNetworkOutgoingUdp = boolean | null;
/**
 * Connect to these unix streams remotely (and to all other paths locally).
 *
 * You can either specify a single value or an array of values. Each value is interpreted as a regular expression ([Supported Syntax](https://docs.rs/regex/1.7.1/regex/index.html#syntax)).
 *
 * When your application connects to a unix socket, the target address will be converted to a string (non-utf8 bytes are replaced by a placeholder character) and matched against the set of regexes specified here. If there is a match, mirrord will connect your application with the target unix socket address on the target pod. Otherwise, it will leave the connection to happen locally on your machine.
 */
export type FeatureNetworkOutgoingUnixStreamsFeatureNetworkOutgoingUnixStreams = VecOrSingleFor_String | null;
/**
 * Define filters to split queues by, and make your local application consume only messages that match those filters. If you don't specify any filter for a queue that is however declared in the `MirrordWorkloadQueueRegistry` of the target you're using, a match-nothing filter will be used, and your local application will not receive any messages from that queue.
 */
export type FeatureSplitQueuesFeatureSplitQueues = SplitQueuesConfig | null;
/**
 * More queue types might be added in the future.
 */
export type QueueFilter =
  | {
      /**
       * A filter is a mapping between message attribute names and regexes they should match. The local application will only receive messages that match **all** of the given patterns. This means, only messages that have **all** of the attributes in the filter, with values of those attributes matching the respective patterns.
       */
      message_filter: {
        [k: string]: string;
      };
      queue_type: "SQS";
      [k: string]: unknown;
    }
  | {
      /**
       * A filter is a mapping between message header names and regexes they should match. The local application will only receive messages that match **all** of the given patterns. This means, only messages that have **all** of the headers in the filter, with values of those headers matching the respective patterns.
       */
      message_filter: {
        [k: string]: string;
      };
      queue_type: "Kafka";
      [k: string]: unknown;
    };
export type InternalProxyRootInternalProxy = InternalProxyFileConfig | null;
/**
 * How much time to wait while we don't have any active connections before exiting.
 *
 * Common cases would be running a chain of processes that skip using the layer and don't connect to the proxy.
 *
 * ```json { "internal_proxy": { "idle_timeout": 30 } } ```
 */
export type InternalProxyIdleTimeoutInternalProxyIdleTimeout = number | null;
/**
 * Whether the proxy should output logs in JSON format. If false, logs are output in human-readable format.
 *
 * Defaults to true.
 */
export type InternalProxyJsonLogInternalProxyJsonLog = boolean | null;
/**
 * Set the log file destination for the internal proxy.
 *
 * Defaults to a randomized path inside the temporary directory.
 */
export type InternalProxyLogDestinationInternalProxyLogDestination = string | null;
/**
 * Set the log level for the internal proxy.
 *
 * The value should follow the RUST_LOG convention (i.e `mirrord=trace`).
 *
 * Defaults to `mirrord=info,warn`.
 */
export type InternalProxyLogLevelInternalProxyLogLevel = string | null;
/**
 * How often to log information about connected processes in seconds.
 *
 * This feature logs details about processes that are currently connected to the internal proxy, including their PID, process name, command line, and connection status.
 *
 * ```json { "internal_proxy": { "process_logging_interval": 60 } } ```
 */
export type InternalProxyProcessLoggingIntervalInternalProxyProcessLoggingInterval = number | null;
/**
 * How much time to wait for the first connection to the proxy in seconds.
 *
 * Common cases would be running with dlv or any other debugger, which sets a breakpoint on process execution, delaying the layer startup and connection to proxy.
 *
 * ```json { "internal_proxy": { "start_idle_timeout": 60 } } ```
 */
export type InternalProxyStartIdleTimeoutInternalProxyStartIdleTimeout = number | null;
/**
 * Kube context to use from the kubeconfig file. Will use current context if not specified.
 *
 * ```json { "kube_context": "mycluster" } ```
 */
export type KubeContextRootKubeContext = string | null;
/**
 * Path to a kubeconfig file, if not specified, will use `KUBECONFIG`, or `~/.kube/config`, or the in-cluster config.
 *
 * ```json { "kubeconfig": "~/bear/kube-config" } ```
 */
export type KubeconfigRootKubeconfig = string | null;
/**
 * Whether mirrord should use the operator. If not set, mirrord will first attempt to use the operator, but continue without it in case of failure.
 */
export type OperatorRootOperator = boolean | null;
/**
 * Name of the mirrord profile to use.
 *
 * To select a cluster-wide profile
 *
 * ```json { "profile": "my-profile-name" } ```
 *
 * To select a namespaced profile
 *
 * ```json { "profile": "my-namespace/my-profile-name" } ```
 */
export type ProfileRootProfile = string | null;
/**
 * Binaries to patch (macOS SIP).
 *
 * Use this when mirrord isn't loaded to protected binaries that weren't automatically patched.
 *
 * Runs `endswith` on the binary path (so `bash` would apply to any binary ending with `bash` while `/usr/bin/bash` would apply only for that binary).
 *
 * ```json { "sip_binaries": ["bash", "python"] } ```
 */
export type SipBinariesRootSipBinaries = VecOrSingleFor_String | null;
/**
 * Allows mirrord to skip build tools. Useful when running command lines that build and run the application in a single command.
 *
 * Defaults to `true`.
 *
 * Build-Tools: `["as", "cc", "ld", "go", "air", "asm", "cc1", "cgo", "dlv", "gcc", "git", "link", "math", "cargo", "hpack", "rustc", "compile", "collect2", "cargo-watch", "debugserver"]`
 */
export type SkipBuildToolsRootSkipBuildTools = boolean | null;
/**
 * Allows mirrord to skip the specified build tools. Useful when running command lines that build and run the application in a single command.
 *
 * Must also enable [`skip_build_tools`](#root-skip_build_tools) for this to take an effect.
 *
 * It's similar to [`skip_processes`](#root-skip_processes), except that here it also skips SIP patching.
 *
 * Accepts a single value, or an array of values.
 *
 * ```json { "skip_extra_build_tools": ["bash", "node"] } ```
 */
export type SkipExtraBuildToolsRootSkipBuildTools = VecOrSingleFor_String | null;
/**
 * Allows mirrord to skip unwanted processes.
 *
 * Useful when process A spawns process B, and the user wants mirrord to operate only on process B. Accepts a single value, or an array of values.
 *
 * ```json { "skip_processes": ["bash", "node"] } ```
 */
export type SkipProcessesRootSkipProcesses = VecOrSingleFor_String | null;
/**
 * Allows mirrord to skip patching (macOS SIP) unwanted processes.
 *
 * When patching is skipped, mirrord will no longer be able to load into the process and its child processes.
 *
 * Defaults to `{ "skip_sip": "git" }`
 *
 * When specified, the given value will replace the default list rather than being added to.
 */
export type SkipSipRootSkipSip = VecOrSingleFor_String | null;
export type StartupRetryRootStartupRetry = StartupRetryFileConfig | null;
/**
 * Sets the max interval (in milliseconds) of retries for Kubernetes API requests made by mirrord during startup (e.g. for resolving the target or connecting to the mirrord Operator).
 *
 * Defaults to `5000` milliseconds.
 */
export type StartupRetryMaxMsStartupRetryMaxMs = number | null;
/**
 * Sets the max amount of retries for Kubernetes API requests made by mirrord during startup (e.g. for resolving the target or connecting to the mirrord Operator).
 *
 * If you want to **disable** request retries, set this value to `0`.
 *
 * Defaults to `2`.
 */
export type StartupRetryMaxRetriesStartupRetryMaxRetries = number | null;
/**
 * Sets the min interval (in milliseconds) of retries for Kubernetes API requests made by mirrord during startup (e.g. for resolving the target or connecting to the mirrord Operator).
 *
 * Defaults to `500` milliseconds.
 */
export type StartupRetryMinMsStartupRetryMinMs = number | null;
export type TargetRootTarget = TargetFileConfig | null;
export type TargetFileConfig =
  | (Target | null | string)
  | {
      namespace?: string | null;
      /**
       * <!--${internal}--> Path is optional so that it can also be specified via env var instead of via conf file, but it is not optional in a resulting [`TargetConfig`] object - either there is a path, or the target configuration is `None`.
       */
      path?: Target | null;
    };
export type Target =
  | DeploymentTarget
  | PodTarget
  | RolloutTarget
  | JobTarget
  | CronJobTarget
  | StatefulSetTarget
  | ServiceTarget
  | ReplicaSetTarget
  | "targetless";
/**
 * Controls whether or not mirrord sends telemetry data to MetalBear cloud. Telemetry sent doesn't contain personal identifiers or any data that should be considered sensitive. It is used to improve the product. [For more information](https://github.com/metalbear-co/mirrord/blob/main/TELEMETRY.md)
 */
export type TelemetryRootTelemetry = boolean | null;
/**
 * When disabled, mirrord will remove `HTTP[S]_PROXY` env variables before doing any network requests. This is useful when the system sets a proxy but you don't want mirrord to use it. This also applies to the mirrord process (as it just removes the env). If the remote pod sets this env, the mirrord process will still use it.
 */
export type UseProxyRootUseProxy = boolean | null;

/**
 * mirrord allows for a high degree of customization when it comes to which features you want to enable, and how they should function.
 *
 * All of the configuration fields have a default value, so a minimal configuration would be no configuration at all.
 *
 * The configuration supports templating using the [Tera](https://keats.github.io/tera/docs/) template engine. Currently we don't provide additional values to the context, if you have anything you want us to provide please let us know.
 *
 * To use a configuration file in the CLI, use the `-f <CONFIG_PATH>` flag. Or if using VSCode Extension or JetBrains plugin, simply create a `.mirrord/mirrord.json` file or use the UI.
 *
 * To help you get started, here are examples of a basic configuration file, and a complete configuration file containing all fields.
 *
 * ### Basic `config.json` {#root-basic}
 *
 * ```json { "target": "pod/bear-pod", "feature": { "env": true, "fs": "read", "network": true } } ```
 *
 * ### Basic `config.json` with templating {#root-basic-templating}
 *
 * ```json { "target": "{{ get_env(name="TARGET", default="pod/fallback") }}", "feature": { "env": true, "fs": "read", "network": true } } ```
 *
 * ### Complete `config.json` {#root-complete}
 *
 * Don't use this example as a starting point, it's just here to show you all the available options. ```json { "accept_invalid_certificates": false, "skip_processes": "ide-debugger", "target": { "path": "pod/bear-pod", "namespace": "default" }, "connect_tcp": null, "agent": { "log_level": "info", "json_log": false, "labels": { "user": "meow" }, "annotations": { "cats.io/inject": "enabled" }, "namespace": "default", "image": "ghcr.io/metalbear-co/mirrord:latest", "image_pull_policy": "IfNotPresent", "image_pull_secrets": [ { "secret-key": "secret" } ], "ttl": 30, "ephemeral": false, "communication_timeout": 30, "startup_timeout": 360, "network_interface": "eth0", "flush_connections": true, "metrics": "0.0.0.0:9000", }, "feature": { "env": { "include": "DATABASE_USER;PUBLIC_ENV", "exclude": "DATABASE_PASSWORD;SECRET_ENV", "override": { "DATABASE_CONNECTION": "db://localhost:7777/my-db", "LOCAL_BEAR": "panda" }, "mapping": { ".+_TIMEOUT": "1000" } }, "fs": { "mode": "write", "read_write": ".+\\.json" , "read_only": [ ".+\\.yaml", ".+important-file\\.txt" ], "local": [ ".+\\.js", ".+\\.mjs" ] }, "network": { "incoming": { "mode": "steal", "http_filter": { "header_filter": "host: api\\..+" }, "port_mapping": [[ 7777, 8888 ]], "ignore_localhost": false, "ignore_ports": [9999, 10000] }, "outgoing": { "tcp": true, "udp": true, "filter": { "local": ["tcp://1.1.1.0/24:1337", "1.1.5.0/24", "google.com", ":53"] }, "ignore_localhost": false, "unix_streams": "bear.+" }, "dns": { "enabled": true, "filter": { "local": ["1.1.1.0/24:1337", "1.1.5.0/24", "google.com"] } } }, "copy_target": { "scale_down": false } }, "operator": true, "kubeconfig": "~/.kube/config", "sip_binaries": "bash", "telemetry": true, "kube_context": "my-cluster" } ```
 *
 * # Options {#root-options}
 */
export interface LayerFileConfig {
  accept_invalid_certificates?: AcceptInvalidCertificatesRootAcceptInvalidCertificates;
  agent?: AgentRootAgent;
  container?: ContainerRootContainer;
  experimental?: ExperimentalRootExperimental;
  external_proxy?: ExternalProxyRootExternalProxy;
  feature?: FeatureRootFeature;
  internal_proxy?: InternalProxyRootInternalProxy;
  kube_context?: KubeContextRootKubeContext;
  kubeconfig?: KubeconfigRootKubeconfig;
  operator?: OperatorRootOperator;
  profile?: ProfileRootProfile;
  sip_binaries?: SipBinariesRootSipBinaries;
  skip_build_tools?: SkipBuildToolsRootSkipBuildTools;
  skip_extra_build_tools?: SkipExtraBuildToolsRootSkipBuildTools;
  skip_processes?: SkipProcessesRootSkipProcesses;
  skip_sip?: SkipSipRootSkipSip;
  startup_retry?: StartupRetryRootStartupRetry;
  target?: TargetRootTarget;
  telemetry?: TelemetryRootTelemetry;
  use_proxy?: UseProxyRootUseProxy;
}
/**
 * Configuration for the mirrord-agent pod that is spawned in the Kubernetes cluster.
 *
 * **Note:** this configuration is ignored when using the mirrord Operator. Agent configuration is done by the cluster admin.
 *
 * We provide sane defaults for this option, so you don't have to set up anything here.
 *
 * ```json { "agent": { "log_level": "info", "json_log": false, "namespace": "default", "image": "ghcr.io/metalbear-co/mirrord:latest", "image_pull_policy": "IfNotPresent", "image_pull_secrets": [ { "secret-key": "secret" } ], "ttl": 30, "ephemeral": false, "communication_timeout": 30, "startup_timeout": 360, "network_interface": "eth0", "flush_connections": false, "exclude_from_mesh": false "inject_headers": false, } } ```
 */
export interface AgentFileConfig {
  annotations?: AgentAnnotationsAgentAnnotations;
  check_out_of_pods?: AgentCheckOutOfPodsAgentCheckOutOfPods;
  communication_timeout?: AgentCommunicationTimeoutAgentCommunicationTimeout;
  disabled_capabilities?: AgentDisabledCapabilitiesAgentDisabledCapabilities;
  dns?: AgentDnsAgentDns;
  ephemeral?: AgentEphemeralAgentEphemeral;
  exclude_from_mesh?: AgentExcludeFromMeshAgentExcludeFromMesh;
  flush_connections?: AgentFlushConnectionsAgentFlushConnections;
  image?: AgentImageAgentImage;
  image_pull_policy?: AgentImagePullPolicyAgentImagePullPolicy;
  image_pull_secrets?: AgentImagePullSecretsAgentImagePullSecrets;
  inject_headers?: AgentInjectHeadersAgentInjectHeaders;
  json_log?: AgentJsonLogAgentJsonLog;
  labels?: AgentLabelsAgentLabels;
  log_level?: AgentLogLevelAgentLogLevel;
  metrics?: AgentMetricsAgentMetrics;
  namespace?: AgentNamespaceAgentNamespace;
  network_interface?: AgentNetworkInterfaceAgentNetworkInterface;
  nftables?: AgentNftablesAgentNftables;
  node_selector?: AgentNodeSelectorAgentNodeSelector;
  passthrough_mirroring?: AgentPassthroughMirroringAgentPassthroughMirroring;
  priority_class?: AgentPriorityClassAgentPriorityClass;
  privileged?: AgentPrivilegedAgentPrivileged;
  resources?: AgentResourcesAgentResources;
  service_account?: AgentServiceAccountAgentServiceAccount;
  startup_timeout?: AgentStartupTimeoutAgentStartupTimeout;
  tolerations?: AgentTolerationsAgentTolerations;
  ttl?: AgentTtlAgentTtl;
}
/**
 * Configuration options for how the agent performs DNS resolution.
 */
export interface FileAgentDnsConfig {
  attempts?: AgentDnsAttemptsAgentDnsAttempts;
  timeout?: AgentDnsTimeoutAgentDnsTimeout;
}
/**
 * <!--${internal}--> Specifies a secret reference for the agent pod.
 */
export interface AgentPullSecret {
  /**
   * Name of the secret.
   */
  name: string;
  [k: string]: unknown;
}
/**
 * ResourceRequirements describes the compute resource requirements.
 */
export interface IoK8SApiCoreV1 {
  /**
   * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
   *
   * This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
   *
   * This field is immutable. It can only be set for containers.
   */
  claims?: IoK8SApiCoreV11[];
  /**
   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   */
  limits?: {
    [k: string]: IoK8SApimachineryPkgApiResourceQuantity;
  };
  /**
   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   */
  requests?: {
    [k: string]: IoK8SApimachineryPkgApiResourceQuantity;
  };
  [k: string]: unknown;
}
/**
 * ResourceClaim references one entry in PodSpec.ResourceClaims.
 */
export interface IoK8SApiCoreV11 {
  /**
   * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
   */
  name: string;
  [k: string]: unknown;
}
/**
 * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
 */
export interface IoK8SApiCoreV12 {
  /**
   * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
   */
  effect?: string;
  /**
   * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
   */
  key?: string;
  /**
   * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
   */
  operator?: string;
  /**
   * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
   */
  tolerationSeconds?: number;
  /**
   * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
   */
  value?: string;
  [k: string]: unknown;
}
/**
 * Unstable: `mirrord container` command specific config.
 */
export interface ContainerFileConfig {
  cli_extra_args?: ContainerCliExtraArgsContainerCliExtraArgs;
  cli_image?: ContainerCliImageContainerCliImage;
  cli_image_lib_path?: ContainerCliImageLibPathContainerCliImage;
  cli_prevent_cleanup?: ContainerCliPreventCleanupContainerCliExtraArgs;
  cli_tls_path?: ContainerCliTlsPathContainerCliTlsPath;
  override_host_ip?: ContainerOverrideHostIpContainerOverrideHostIp;
  platform?: ContainerPlatformContainerPlatform;
}
/**
 * mirrord Experimental features. This shouldn't be used unless someone from MetalBear/mirrord tells you to.
 */
export interface ExperimentalFileConfig {
  browser_extension_config?: _Experimental_BrowserExtensionConfigExperimentalBrowserExtensionConfig;
  disable_reuseaddr?: _Experimental_DisableReuseaddrExperimentalDisableReuseaddr;
  dns_permission_error_fatal?: _Experimental_DnsPermissionErrorFatalExperimentalDnsPermissionErrorFatal;
  enable_exec_hooks_linux?: _Experimental_EnableExecHooksLinuxExperimentalEnableExecHooksLinux;
  force_hook_connect?: _Experimental_ForceHookConnectExperimentalForceHookConnect;
  hide_ipv6_interfaces?: _Experimental_HideIpv6InterfacesExperimentalHideIpv6Interfaces;
  hook_rename?: _Experimental_HookRenameExperimentalHookRename;
  idle_local_http_connection_timeout?: _Experimental_IdleLocalHttpConnectionTimeoutExperimentalIdleLocalHttpConnectionTimeout;
  ignore_system_proxy_config?: _Experimental_IgnoreSystemProxyConfigExperimentalIgnoreSystemProxyConfig;
  non_blocking_tcp_connect?: _Experimental_NonBlockingTcpConnectExperimentalNonBlockingTcpConnect;
  readlink?: _Experimental_ReadlinkExperimentalReadlink;
  readonly_file_buffer?: _Experimental_ReadonlyFileBufferExperimentalReadonlyFileBuffer;
  sip_log_destination?: _Experimental_SipLogDestinationExperimentalSipLogDestination;
  tcp_ping4_mock?: _Experimental_TcpPing4MockExperimentalTcpPing4Mock;
  trust_any_certificate?: _Experimental_TrustAnyCertificateExperimentalTrustAnyCertificate;
  use_dev_null?: _Experimental_UseDevNullExperimentalUseDevNull;
  vfork_emulation?: _Experimental_VforkEmulationExperimentalVforkEmulation;
}
/**
 * Configuration for the external proxy mirrord spawns when using the `mirrord container` command. This proxy is used to allow the internal proxy running in sidecar to connect to the mirrord agent.
 *
 * If you get `ConnectionRefused` errors, increasing the timeouts a bit might solve the issue.
 *
 * ```json { "external_proxy": { "start_idle_timeout": 30, "idle_timeout": 5 } } ```
 */
export interface ExternalProxyFileConfig {
  host_ip?: ExternalProxyHostIpExternalProxyHostIp;
  idle_timeout?: ExternalProxyIdleTimeoutExternalProxyIdleTimeout;
  json_log?: ExternalProxyJsonLogExternalProxyJsonLog;
  log_destination?: ExternalProxyLogDestinationExternalProxyLogDestination;
  log_level?: ExternalProxyLogLevelExternalProxyLogLevel;
  start_idle_timeout?: ExternalProxyStartIdleTimeoutExternalProxyStartIdleTimeout;
  /**
   * <!--${internal}-->
   *
   * Whether to use TLS or a plain TCP when accepting a connection from the internal proxy sidecar.
   */
  tls_enable?: boolean | null;
}
/**
 * Controls mirrord features.
 *
 * See the [technical reference, Technical Reference](https://metalbear.com/mirrord/docs/reference/) to learn more about what each feature does.
 *
 * The [`env`](#feature-env), [`fs`](#feature-fs) and [`network`](#feature-network) options have support for a shortened version, that you can see [here](#root-shortened).
 *
 * ```json { "feature": { "env": { "include": "DATABASE_USER;PUBLIC_ENV", "exclude": "DATABASE_PASSWORD;SECRET_ENV", "override": { "DATABASE_CONNECTION": "db://localhost:7777/my-db", "LOCAL_BEAR": "panda" } }, "fs": { "mode": "write", "read_write": ".+\\.json" , "read_only": [ ".+\\.yaml", ".+important-file\\.txt" ], "local": [ ".+\\.js", ".+\\.mjs" ] }, "network": { "incoming": { "mode": "steal", "http_filter": { "header_filter": "host: api\\..+" }, "port_mapping": [[ 7777, 8888 ]], "ignore_localhost": false, "ignore_ports": [9999, 10000] }, "outgoing": { "tcp": true, "udp": true, "filter": { "local": ["tcp://1.1.1.0/24:1337", "1.1.5.0/24", "google.com", ":53"] }, "ignore_localhost": false, "unix_streams": "bear.+" }, "dns": false }, "copy_target": false, "hostname": true } } ```
 */
export interface FeatureFileConfig {
  copy_target?: FeatureCopyTargetFeatureCopyTarget;
  db_branches?: FeatureDbBranchesFeatureDbBranches;
  env?: FeatureEnvFeatureEnv;
  fs?: FeatureFsFeatureFs;
  hostname?: FeatureHostnameFeatureHostname;
  network?: FeatureNetworkFeatureNetwork;
  split_queues?: FeatureSplitQueuesFeatureSplitQueues;
}
/**
 * Allows the user to set or override the local process' environment variables with the ones from the remote pod.
 *
 * Can be set to one of the options:
 *
 * 1. `false` - Disables the feature, won't have remote environment variables. 2. `true` - Enables the feature, will obtain remote environment variables. 3. object - see below (means `true` + additional configuration).
 *
 * Which environment variables to load from the remote pod are controlled by setting either [`include`](#feature-env-include) or [`exclude`](#feature-env-exclude).
 *
 * See the environment variables [reference](https://metalbear.com/mirrord/docs/reference/env/) for more details.
 *
 * ```json { "feature": { "env": { "include": "DATABASE_USER;PUBLIC_ENV;MY_APP_*", "exclude": "DATABASE_PASSWORD;SECRET_ENV", "override": { "DATABASE_CONNECTION": "db://localhost:7777/my-db", "LOCAL_BEAR": "panda" }, "mapping": { ".+_TIMEOUT": "1000" } } } } ```
 */
export interface EnvFileConfig {
  env_file?: FeatureEnvFileFeatureEnvFile;
  exclude?: FeatureEnvExcludeFeatureEnvExclude;
  include?: FeatureEnvIncludeFeatureEnvInclude;
  load_from_process?: FeatureEnvLoadFromProcessFeatureEnvLoadFromProcess;
  mapping?: FeatureEnvMappingFeatureEnvMapping;
  override?: FeatureEnvOverrideFeatureEnvOverride;
  unset?: FeatureEnvUnsetFeatureEnvUnset;
}
/**
 * Allows the user to specify the default behavior for file operations:
 *
 * 1. `"read"` or `true` - Read from the remote file system (default) 2. `"write"` - Read/Write from the remote file system. 3. `"local"` or `false` - Read from the local file system. 4. `"localwithoverrides"` - perform fs operation locally, unless the path matches a pre-defined or user-specified exception.
 *
 * > Note: by default, some paths are read locally or remotely, regardless of the selected FS mode. > This is described in further detail below.
 *
 * Besides the default behavior, the user can specify behavior for specific regex patterns. Case insensitive.
 *
 * 1. `"read_write"` - List of patterns that should be read/write remotely. 2. `"read_only"` - List of patterns that should be read only remotely. 3. `"local"` - List of patterns that should be read locally. 4. `"not_found"` - List of patters that should never be read nor written. These files should be treated as non-existent. 4. `"mapping"` - Map of patterns and their corresponding replacers. The replacement happens before any specific behavior as defined above or mode (uses [`Regex::replace`](https://docs.rs/regex/latest/regex/struct.Regex.html#method.replace))
 *
 * The logic for choosing the behavior is as follows:
 *
 * 1. Check agains "mapping" if path needs to be replaced, if matched then continue to next step with new path after replacements otherwise continue as usual. 2. Check if one of the patterns match the file path, do the corresponding action. There's no specified order if two lists match the same path, we will use the first one (and we do not guarantee what is first).
 *
 * **Warning**: Specifying the same path in two lists is unsupported and can lead to undefined behaviour.
 *
 * 3. There are pre-defined exceptions to the set FS mode. 1. Paths that match [the patterns defined here](https://github.com/metalbear-co/mirrord/tree/latest/mirrord/layer/src/file/filter/read_local_by_default.rs) are read locally by default. 2. Paths that match [the patterns defined here](https://github.com/metalbear-co/mirrord/tree/latest/mirrord/layer/src/file/filter/read_remote_by_default.rs) are read remotely by default when the mode is `localwithoverrides`. 3. Paths that match [the patterns defined here](https://github.com/metalbear-co/mirrord/tree/latest/mirrord/layer/src/file/filter/not_found_by_default.rs) under the running user's home directory will not be found by the application when the mode is not `local`.
 *
 * In order to override that default setting for a path, or a pattern, include it the appropriate pattern set from above. E.g. in order to read files under `/etc/` remotely even though it is covered by [the set of patterns that are read locally by default](https://github.com/metalbear-co/mirrord/tree/latest/mirrord/layer/src/file/filter/read_local_by_default.rs), add `"^/etc/."` to the `read_only` set.
 *
 * 4. If none of the above match, use the default behavior (mode).
 *
 * For more information, check the file operations [technical reference](https://metalbear.com/mirrord/docs/reference/fileops/).
 *
 * ```json { "feature": { "fs": { "mode": "write", "read_write": ".+\\.json" , "read_only": [ ".+\\.yaml", ".+important-file\\.txt" ], "local": [ ".+\\.js", ".+\\.mjs" ], "not_found": [ "\\.config/gcloud" ] } } } ```
 */
export interface AdvancedFsUserConfig {
  local?: FeatureFsLocalFeatureFsLocal;
  mapping?: FeatureFsMappingFeatureFsMapping;
  mode?: FeatureFsModeFeatureFsMode;
  not_found?: FeatureFsNotFoundFeatureFsNotFound;
  read_only?: FeatureFsReadOnlyFeatureFsReadOnly;
  read_write?: FeatureFsReadWriteFeatureFsReadWrite;
  readonly_file_buffer?: FeatureFsReadonlyFileBufferFeatureFsReadonlyFileBuffer;
}
/**
 * Controls mirrord network operations.
 *
 * See the network traffic [reference](https://metalbear.com/mirrord/docs/reference/traffic/) for more details.
 *
 * ```json { "feature": { "network": { "incoming": { "mode": "steal", "http_filter": { "header_filter": "host: api\\..+" }, "port_mapping": [[ 7777, 8888 ]], "ignore_localhost": false, "ignore_ports": [9999, 10000] }, "outgoing": { "tcp": true, "udp": true, "filter": { "local": ["tcp://1.1.1.0/24:1337", "1.1.5.0/24", "google.com", ":53"] }, "ignore_localhost": false, "unix_streams": "bear.+" }, "dns": { "enabled": true, "filter": { "local": ["1.1.1.0/24:1337", "1.1.5.0/24", "google.com"] } } } } } ```
 */
export interface NetworkFileConfig {
  dns?: FeatureNetworkDnsFeatureNetworkDns;
  incoming?: FeatureNetworkIncomingFeatureNetworkIncoming;
  ipv6?: FeatureNetworkIpv6FeatureNetworkIpv6;
  outgoing?: FeatureNetworkOutgoingFeatureNetworkOutgoing;
}
/**
 * Resolve DNS via the remote pod.
 *
 * Defaults to `true`.
 *
 * Mind that: - DNS resolving can be done in multiple ways. Some frameworks use `getaddrinfo`/`gethostbyname` functions, while others communicate directly with the DNS server at port `53` and perform a sort of manual resolution. Just enabling the `dns` feature in mirrord might not be enough. If you see an address resolution error, try enabling the [`fs`](#feature-fs) feature, and setting `read_only: ["/etc/resolv.conf"]`. - DNS filter currently works only with frameworks that use `getaddrinfo`/`gethostbyname` functions.
 */
export interface DnsFileConfig {
  enabled?: boolean | null;
  filter?: FeatureNetworkDnsFilterFeatureNetworkDnsFilter;
}
/**
 * Advanced user configuration for network incoming traffic.
 */
export interface IncomingAdvancedSetup {
  http_filter?: HTTPFilter;
  https_delivery?: HttpsDelivery;
  ignore_localhost?: IgnoreLocalhost;
  ignore_ports?: IgnorePorts;
  listen_ports?: ListenPorts;
  mode?: Mode;
  on_concurrent_steal?: OnConcurrentSteal;
  port_mapping?: PortMapping;
  ports?: Ports;
  tls_delivery?: TlsDelivery;
}
/**
 * Filter configuration for the HTTP traffic stealer feature.
 *
 * Allows the user to set a filter (regex) for the HTTP headers, so that the stealer traffic feature only captures HTTP requests that match the specified filter, forwarding unmatched requests to their original destinations.
 *
 * Only does something when [`feature.network.incoming.mode`](#feature-network-incoming-mode) is set as `"steal"`, ignored otherwise.
 *
 * For example, to filter based on header: ```json { "header_filter": "host: api\\..+" } ``` Setting that filter will make mirrord only steal requests with the `host` header set to hosts that start with "api", followed by a dot, and then at least one more character.
 *
 * For example, to filter based on path: ```json { "path_filter": "^/api/" } ``` Setting this filter will make mirrord only steal requests to URIs starting with "/api/".
 *
 * This can be useful for filtering out Kubernetes liveness, readiness and startup probes. For example, for avoiding stealing any probe sent by kubernetes, you can set this filter: ```json { "header_filter": "^User-Agent: (?!kube-probe)" } ``` Setting this filter will make mirrord only steal requests that **do** have a user agent that **does not** begin with "kube-probe".
 *
 * Similarly, you can exclude certain paths using a negative look-ahead: ```json { "path_filter": "^(?!/health/)" } ``` Setting this filter will make mirrord only steal requests to URIs that do not start with "/health/".
 *
 * With `all_of` and `any_of`, you can use multiple HTTP filters at the same time.
 *
 * If you want to steal HTTP requests that match **every** pattern specified, use `all_of`. For example, this filter steals only HTTP requests to endpoint `/api/my-endpoint` that contain header `x-debug-session` with value `121212`. ```json { "all_of": [ { "header": "^x-debug-session: 121212$" }, { "path": "^/api/my-endpoint$" } ] } ```
 *
 * If you want to steal HTTP requests that match **any** of the patterns specified, use `any_of`. For example, this filter steals HTTP requests to endpoint `/api/my-endpoint` **and** HTTP requests that contain header `x-debug-session` with value `121212`. ```json { "any_of": [ { "path": "^/api/my-endpoint$"}, { "header": "^x-debug-session: 121212$" } ] } ```
 */
export interface HttpFilterFileConfig {
  all_of?: FeatureNetworkIncomingHttpFilterAllOfFeatureNetworkIncomingHttpFilterAllOf;
  any_of?: FeatureNetworkIncomingHttpFilterAnyOfFeatureNetworkIncomingHttpFilterAnyOf;
  header_filter?: FeatureNetworkIncomingHttpFilterHeaderFilterFeatureNetworkIncomingHttpHeaderFilter;
  method_filter?: FeatureNetworkIncomingHttpFilterMethodFilterFeatureNetworkIncomingHttpMethodFilter;
  path_filter?: FeatureNetworkIncomingHttpFilterPathFilterFeatureNetworkIncomingHttpPathFilter;
  ports?: FeatureNetworkIncomingHttpFilterPortsFeatureNetworkIncomingHttpFilterPorts;
}
/**
 * Supports regexes validated by the [`fancy-regex`](https://docs.rs/fancy-regex/latest/fancy_regex/) crate.
 *
 * The HTTP traffic feature converts the HTTP headers to `HeaderKey: HeaderValue`, case-insensitive.
 */
export interface FeatureNetworkIncomingInnerFilterHeaderFilterFeatureNetworkIncomingInnerHeaderFilter {
  header: string;
  [k: string]: unknown;
}
/**
 * Supports regexes validated by the [`fancy-regex`](https://docs.rs/fancy-regex/latest/fancy_regex/) crate.
 *
 * Case-insensitive. Tries to find match in the path (without query) and path+query. If any of the two matches, the request is stolen.
 */
export interface FeatureNetworkIncomingInnerFilterPathFilterFeatureNetworkIncomingInnerPathFilter {
  path: string;
  [k: string]: unknown;
}
/**
 * Stolen TLS traffic can be delivered to the local application either as TLS or as plain TCP. Note that stealing TLS traffic requires mirrord Operator support.
 *
 * To have the stolen TLS traffic delivered with plain TCP, use:
 *
 * ```json { "protocol": "tcp" } ```
 *
 * To have the traffic delivered with TLS, use: ```json { "protocol": "tls" } ```
 *
 * By default, the local mirrord TLS client will trust any certificate presented by the local application's TLS server. To override this behavior, you can either:
 *
 * 1. Specify a list of paths to trust roots. These paths can lead either to PEM files or PEM file directories. Each found certificate will be used as a trust anchor. 2. Specify a path to the cartificate chain used by the server.
 *
 * Example with trust roots: ```json { "protocol": "tls", "trust_roots": ["/path/to/cert.pem", "/path/to/cert/dir"] } ```
 *
 * Example with certificate chain: ```json { "protocol": "tls", "server_cert": "/path/to/cert.pem" } ```
 *
 * To make a TLS connection to the local application's server, mirrord's TLS client needs a server name. You can supply it manually like this: ```json { "protocol": "tls", "server_name": "my.test.server.name" } ```
 *
 * If you don't supply the server name:
 *
 * 1. If `server_cert` is given, and the found end-entity certificate contains a valid server name, this server name will be used; 2. Otherwise, if the original client supplied an SNI extension, the server name from that extension will be used; 3. Otherwise, if the stolen request's URL contains a valid server name, that server name will be used; 4. Otherwise, `localhost` will be used.
 */
export interface LocalTlsDelivery {
  protocol: FeatureNetworkIncomingTlsDeliveryProtocolFeatureNetworkIncomingTlsDeliveryProtocol;
  /**
   * Path to a PEM file containing the certificate chain used by the local application's TLS server.
   *
   * This file must contain at least one certificate. It can contain entries of other types, e.g private keys, which are ignored.
   */
  server_cert?: string | null;
  server_name?: FeatureNetworkIncomingTlsDeliveryServerNameFeatureNetworkIncomingTlsDeliveryServerName;
  trust_roots?: FeatureNetworkIncomingTlsDeliveryTrustRootsFeatureNetworkIncomingTlsDeliveryTrustRoots;
  [k: string]: unknown;
}
/**
 * Tunnel outgoing network operations through mirrord.
 *
 * See the outgoing [reference](https://metalbear.com/mirrord/docs/reference/traffic/#outgoing) for more details.
 *
 * You can use either the `remote` or `local` value to turn outgoing traffic tunneling on or off.
 *
 * ```json { "feature": { "network": { "outgoing": "remote" } } } ```
 *
 * Alternatively, you can use more fine-grained configuration. The `remote` and `local` config for this feature are **mutually** exclusive.
 *
 * ```json { "feature": { "network": { "outgoing": { "tcp": true, "udp": true, "ignore_localhost": false, "filter": { "local": ["tcp://1.1.1.0/24:1337", "1.1.5.0/24", "google.com", ":53"] }, "unix_streams": "bear.+" } } } } ```
 */
export interface OutgoingFileConfig {
  filter?: FeatureNetworkOutgoingFilterFeatureNetworkOutgoingFilter;
  ignore_localhost?: FeatureNetworkOutgoingIgnoreLocalhostFeatureNetworkOutgoingIgnoreLocalhost;
  tcp?: FeatureNetworkOutgoingTcpFeatureNetworkOutgoingTcp;
  udp?: FeatureNetworkOutgoingUdpFeatureNetworkOutgoingUdp;
  unix_streams?: FeatureNetworkOutgoingUnixStreamsFeatureNetworkOutgoingUnixStreams;
}
/**
 * ```json { "feature": { "split_queues": { "first-queue": { "queue_type": "SQS", "message_filter": { "wows": "so wows", "coolz": "^very" } }, "second-queue": { "queue_type": "SQS", "message_filter": { "who": "you$" } }, "third-queue": { "queue_type": "Kafka", "message_filter": { "who": "you$" } }, "fourth-queue": { "queue_type": "Kafka", "message_filter": { "wows": "so wows", "coolz": "^very" } }, } } } ```
 */
export interface SplitQueuesConfig {
  [k: string]: QueueFilter;
}
/**
 * Configuration for the internal proxy mirrord spawns for each local mirrord session that local layers use to connect to the remote agent
 *
 * This is seldom used, but if you get `ConnectionRefused` errors, you might want to increase the timeouts a bit.
 *
 * ```json { "internal_proxy": { "start_idle_timeout": 30, "idle_timeout": 5 } } ```
 */
export interface InternalProxyFileConfig {
  idle_timeout?: InternalProxyIdleTimeoutInternalProxyIdleTimeout;
  json_log?: InternalProxyJsonLogInternalProxyJsonLog;
  log_destination?: InternalProxyLogDestinationInternalProxyLogDestination;
  log_level?: InternalProxyLogLevelInternalProxyLogLevel;
  process_logging_interval?: InternalProxyProcessLoggingIntervalInternalProxyProcessLoggingInterval;
  /**
   * <!--${internal}-->
   *
   * Sometimes the cpu is too busy with other tasks and the internal proxy sockets end up timing out. It's set at a ridiculous high value to prevent this from happening when a user hits a breakpoint while debugging, and stays stopped for a while, which sometimes results in mirrord not working when they resume.
   *
   * ```json { "internal_proxy": { "socket_timeout": 31536000 } } ```
   */
  socket_timeout?: number | null;
  start_idle_timeout?: InternalProxyStartIdleTimeoutInternalProxyStartIdleTimeout;
}
/**
 * Controls how many times, and how often mirrord retries its initial Kubernetes API requests (e.g. for resolving the target or connecting to the mirrord Operator).
 *
 * If you're having cluster connectivity issues when **starting** mirrord, consider increasing [`max_retries`](#startup_retry-max_retries) and changing both [`min_ms`](#startup_retry-min_ms) and [`max_ms`](#startup_retry-max_ms) to have mirrord retry some of its initial Kubernetes API requests.
 *
 * ```json { "startup_retry": { "min_ms": 500, "max_ms": 5000, "max_retries": 2, } } ```
 */
export interface StartupRetryFileConfig {
  max_ms?: StartupRetryMaxMsStartupRetryMaxMs;
  max_retries?: StartupRetryMaxRetriesStartupRetryMaxRetries;
  min_ms?: StartupRetryMinMsStartupRetryMinMs;
}
/**
 * <!--${internal}--> Mirror the deployment specified by [`DeploymentTarget::deployment`].
 */
export interface DeploymentTarget {
  container?: string | null;
  /**
   * <!--${internal}--> Deployment to mirror.
   */
  deployment: string;
}
/**
 * <!--${internal}--> Mirror the pod specified by [`PodTarget::pod`].
 */
export interface PodTarget {
  container?: string | null;
  /**
   * <!--${internal}--> Pod to mirror.
   */
  pod: string;
}
/**
 * <!--${internal}--> Mirror the rollout specified by [`RolloutTarget::rollout`].
 */
export interface RolloutTarget {
  container?: string | null;
  /**
   * <!--${internal}--> Rollout to mirror.
   */
  rollout: string;
}
export interface JobTarget {
  container?: string | null;
  job: string;
}
export interface CronJobTarget {
  container?: string | null;
  cron_job: string;
}
export interface StatefulSetTarget {
  container?: string | null;
  stateful_set: string;
}
export interface ServiceTarget {
  container?: string | null;
  service: string;
}
export interface ReplicaSetTarget {
  container?: string | null;
  replica_set: string;
}
