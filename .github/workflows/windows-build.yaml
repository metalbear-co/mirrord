name: Build PR 3536 (Windows, self-hosted, minimal)

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: [self-hosted, Windows]
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout PR 3536 (merge ref)
        uses: actions/checkout@v4
        with:
          ref: refs/pull/3536/merge
          fetch-depth: 0
          submodules: recursive

      # 1) rustup target add x86_64-pc-windows-msvc
      - name: Add Rust MSVC target
        run: rustup target add x86_64-pc-windows-msvc

      # Find which *package* contains the bin target named "mirrord"
      - name: Locate package for bin "mirrord" + set MIRRORD_LAYER_FILE
        run: |
          $meta = cargo metadata --format-version 1 --no-deps | ConvertFrom-Json
          $pkg = $meta.packages | Where-Object {
            $_.targets | Where-Object { ($_."kind" -contains 'bin') -and ($_.name -eq 'mirrord') }
          } | Select-Object -First 1
          if (-not $pkg) {
            $names = ($meta.packages | ForEach-Object name) -join ', '
            throw "No bin target named 'mirrord' found. Workspace packages: $names"
          }
          "MIRRORD_PKG=$($pkg.name)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Will build bin 'mirrord' from package: $($pkg.name)"

          $dll = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug\layer_win.dll'
          "MIRRORD_LAYER_FILE=$dll" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "MIRRORD_LAYER_FILE=$dll"

      # 2) cargo build (just like your local command, but robust to package naming)
      - name: Build mirrord
        run: cargo build -p "$env:MIRRORD_PKG" --bin mirrord --target x86_64-pc-windows-msvc

      # NEW: DigiCert SMCTL health check (assumes smctl is installed on the runner and logged in)
      - name: DigiCert Signing Manager health check
        run: smctl healthcheck

      # NEW: Code sign the built binary using thumbprint + DigiCert timestamp server
      - name: Code sign mirrord.exe
        run: |
          $exe = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug\mirrord.exe'
          if (!(Test-Path $exe)) {
            Write-Error "Expected binary not found at $exe"
            Get-ChildItem -Path (Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug') -Recurse -Filter 'mirrord*.exe' | ForEach-Object { Write-Host "Found: $($_.FullName)" }
            exit 1
          }
          signtool.exe sign `
            /sha1 bfa0bea8d22265cb382d2d5dec55a6ffcff70bcb `
            /tr http://timestamp.digicert.com `
            /td SHA256 `
            /fd SHA256 `
            "$exe"
