name: Build PR 3536 (Windows, self-hosted, minimal)

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: [self-hosted, Windows]
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout PR 3536 (merge ref)
        uses: actions/checkout@v4
        with:
          ref: refs/pull/3536/merge
          fetch-depth: 0
          submodules: recursive

      # If cargo/rustup aren't on PATH for the service account, bootstrap them
      - name: Ensure Rust toolchain (if missing)
        run: |
          $cargo = Get-Command cargo.exe -ErrorAction SilentlyContinue
          if (-not $cargo) {
            $env:CARGO_HOME  = "$env:RUNNER_TEMP\.cargo"
            $env:RUSTUP_HOME = "$env:RUNNER_TEMP\.rustup"
            $installer = "$env:RUNNER_TEMP\rustup-init.exe"
            Invoke-WebRequest -Uri https://win.rustup.rs/x86_64 -OutFile $installer
            & $installer -y --default-host x86_64-pc-windows-msvc --profile minimal
            $env:PATH = "$env:CARGO_HOME\bin;$env:PATH"
          }
          rustup --version
          cargo --version

      - name: Add Rust MSVC target
        run: rustup target add x86_64-pc-windows-msvc

      # Build the Windows layer DLL (package name as used in your repo)
      - name: Build mirrord-layer-win (DLL)
        run: |
          cargo build -p mirrord-layer-win --target x86_64-pc-windows-msvc

      # Find which *package* contains the bin target named "mirrord", and set MIRRORD_LAYER_FILE
      - name: Locate package for bin "mirrord" + set MIRRORD_LAYER_FILE
        run: |
          $meta = cargo metadata --format-version 1 --no-deps | ConvertFrom-Json
          $pkg = $meta.packages | Where-Object {
            $_.targets | Where-Object { ($_."kind" -contains 'bin') -and ($_.name -eq 'mirrord') }
          } | Select-Object -First 1
          if (-not $pkg) {
            $names = ($meta.packages | ForEach-Object name) -join ', '
            throw "No bin target named 'mirrord' found. Workspace packages: $names"
          }
          "MIRRORD_PKG=$($pkg.name)" | Out-File -FilePath $env:GITHUB_ENV -Append
          $dll = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug\mirrord_layer_win.dll'
          "MIRRORD_LAYER_FILE=$dll" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Will build bin 'mirrord' from package: $($pkg.name)"
          Write-Host "MIRRORD_LAYER_FILE=$dll"

      - name: Build mirrord (EXE)
        run: cargo build -p "$env:MIRRORD_PKG" --bin mirrord --target x86_64-pc-windows-msvc

      # Locate SignTool and verify artifacts exist
      - name: Export SignTool path + verify artifacts
        run: |
          $signtool = 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x64\signtool.exe'
          if (-not (Test-Path $signtool)) {
            $found = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe" -ErrorAction SilentlyContinue |
              Sort-Object FullName -Descending | Select-Object -First 1
            if ($found) { $signtool = $found.FullName }
          }
          if (-not (Test-Path $signtool)) { throw "SignTool not found." }
          "SIGNTOOL=$signtool" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Using SignTool at $signtool"

          $dll = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug\mirrord_layer_win.dll'
          $exe = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug\mirrord.exe'
          if (-not (Test-Path $dll)) { throw "DLL not found at $dll" }
          if (-not (Test-Path $exe)) { throw "EXE not found at $exe" }
          "MIRRORD_EXE=$exe" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "DLL: $dll"
          Write-Host "EXE: $exe"

      # Prepare DigiCert creds (overwrite each run) and register KSP
      - name: Prepare DigiCert creds (smctl + KSP)
        env:
          DIGICERT_API_KEY:              ${{ secrets.DIGICERT_API_KEY }}
          DIGICERT_CLIENT_CERT_PFX_B64:  ${{ secrets.DIGICERT_CLIENT_CERT_PFX_B64 }}
          DIGICERT_CLIENT_CERT_PASSWORD: ${{ secrets.DIGICERT_CLIENT_CERT_PASSWORD }}
        run: |
          $smctl = "C:\Program Files\DigiCert\DigiCert Keylocker Tools\smctl.exe"
          if (-not (Test-Path $smctl)) { throw "smctl.exe not found at $smctl" }
          "SMCTL=$smctl" | Out-File -FilePath $env:GITHUB_ENV -Append

          $p12 = Join-Path $env:RUNNER_TEMP "client-auth.p12"
          [IO.File]::WriteAllBytes($p12, [Convert]::FromBase64String($env:DIGICERT_CLIENT_CERT_PFX_B64))
          $env:SM_HOST = "https://clientauth.one.digicert.com"
          $env:SM_CLIENT_CERT_FILE = $p12

          & $smctl credentials clear 2>$null
          & $smctl credentials save $env:DIGICERT_API_KEY $env:DIGICERT_CLIENT_CERT_PASSWORD
          try { & $smctl windows ksp register } catch { Write-Warning $_ }

          Write-Host "`nKeypairs visible to this user:"
          & $smctl keypair list

      # Sync the alias into the store and pick the cert backed by the DigiCert KSP; set CODESIGN_SHA1
      - name: Certsync alias and pick KSP-backed cert (sets CODESIGN_SHA1)
        shell: pwsh
        env:
          DIGICERT_KEYPAIR_ALIAS: ${{ secrets.DIGICERT_KEYPAIR_ALIAS }}
        run: |
          $ErrorActionPreference = 'Stop'
          $smctl = "$env:SMCTL"
          $alias = "$env:DIGICERT_KEYPAIR_ALIAS".Trim()
          if (-not (Test-Path $smctl)) { throw "smctl.exe not found at $smctl" }
          if (-not $alias) { throw "DIGICERT_KEYPAIR_ALIAS is empty." }

          & $smctl windows certsync --keypair-alias $alias
          if ($LASTEXITCODE -ne 0) { throw "certsync failed for alias '$alias'." }

          $dump   = certutil -store -user My | Out-String
          $blocks = $dump -split "(?m)^=+ +Certificate +\d+ +=+"
          $kspThumbs = @()
          foreach ($b in $blocks) {
            if ($b -match 'Provider\s*=\s*DigiCert Signing Manager KSP' -and
                $b -match 'Cert Hash\(sha1\):\s*([A-F0-9 ]+)') {
              $tp = ($Matches[1] -replace '\s','').ToUpper()
              if ($tp) { $kspThumbs += $tp }
            }
          }
          if (-not $kspThumbs) {
            Write-Host "`nCurrentUser\My (diagnostics):"
            Get-ChildItem Cert:\CurrentUser\My | Select-Object Subject, Thumbprint, NotAfter
            throw "No certificate in CurrentUser\My backed by 'DigiCert Signing Manager KSP' was found."
          }

          $now   = Get-Date
          $cands = Get-ChildItem Cert:\CurrentUser\My | Where-Object {
            $_.HasPrivateKey -and
            $_.NotAfter -gt $now -and
            (($_.EnhancedKeyUsageList | ForEach-Object FriendlyName) -contains 'Code Signing') -and
            ($kspThumbs -contains ($_.Thumbprint -replace '\s','').ToUpper())
          } | Sort-Object NotBefore -Descending

          $pick = $cands | Select-Object -First 1
          if (-not $pick) {
            Write-Host "`nCurrentUser\My (diagnostics):"
            Get-ChildItem Cert:\CurrentUser\My | Select-Object Subject, Thumbprint, NotBefore, NotAfter
            throw "No suitable KSP-backed Code Signing cert found (check NotAfter, EKU, signer access)."
          }

          $thumb = ($pick.Thumbprint -replace '\s','').ToUpper()
          "CODESIGN_SHA1=$thumb" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Using KSP-backed Code Signing cert: $($pick.Subject)"
          Write-Host "Thumbprint: $thumb"

      # Sign using the KSP-backed cert in the store (/sha1)
      - name: Sign artifacts (DLL + EXE) via store (/sha1)
        run: |
          $ErrorActionPreference = 'Stop'
          $ts = "http://timestamp.digicert.com"
          $sha1 = "$env:CODESIGN_SHA1"
          if (-not $sha1) { throw "CODESIGN_SHA1 not set (previous step should export it)." }

          & "$env:SIGNTOOL" sign /fd SHA256 /td SHA256 /tr $ts /sha1 $sha1 "$env:MIRRORD_LAYER_FILE"
          & "$env:SIGNTOOL" sign /fd SHA256 /td SHA256 /tr $ts /sha1 $sha1 "$env:MIRRORD_EXE"

      - name: Verify signatures
        run: |
          & "$env:SIGNTOOL" verify /pa /all "$env:MIRRORD_LAYER_FILE"
          & "$env:SIGNTOOL" verify /pa /all "$env:MIRRORD_EXE"
