# name: Build PR 3536 (Windows, self-hosted, minimal)

# on:
#   workflow_dispatch:

# permissions:
#   contents: read

# jobs:
#   build:
#     runs-on: [self-hosted, Windows]
#     defaults:
#       run:
#         shell: pwsh

#     env:
#       # Build output paths (adjust if you use Release)
#       LAYER_DLL: target\x86_64-pc-windows-msvc\debug\layer_win.dll
#       MIRRORD_EXE: target\x86_64-pc-windows-msvc\debug\mirrord.exe

#     steps:
#       - name: Checkout PR 3536 (merge ref)
#         uses: actions/checkout@v4
#         with:
#           ref: refs/pull/3536/merge
#           fetch-depth: 1

#       - name: Add Rust MSVC target
#         run: rustup target add x86_64-pc-windows-msvc

#       - name: Build layer-win (DLL)
#         run: cargo build -p layer-win --target x86_64-pc-windows-msvc

#       - name: Set MIRRORD_LAYER_FILE
#         run: |
#           $env:MIRRORD_LAYER_FILE = "${{ env.LAYER_DLL }}"
#           "MIRRORD_LAYER_FILE=$env:MIRRORD_LAYER_FILE" | Out-File -FilePath $env:GITHUB_ENV -Append

#       - name: Build mirrord (EXE)
#         run: cargo build -p mirrord --target x86_64-pc-windows-msvc

#       # ---------- Signing prep: ensure SignTool is available ----------
#       - name: Locate or install Windows SDK (SignTool)
#         run: |
#           # Try to locate SignTool in Windows Kits
#           $sdkBin = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\bin' -Directory -ErrorAction SilentlyContinue |
#             Sort-Object Name -Descending | Select-Object -First 1

#           if (-not $sdkBin) {
#             Write-Host "Windows SDK not found; attempting install via winget..."
#             try {
#               winget source update | Out-Null
#               # Use the community source explicitly to avoid msstore prompts
#               $pkg = "Microsoft.WindowsSDK.10.0.26100"
#               winget install --source winget --exact --id $pkg --accept-package-agreements --accept-source-agreements
#             } catch {
#               Write-Error "Failed to install Windows SDK automatically. Install it on the runner and rerun."
#               exit 1
#             }
#             $sdkBin = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\bin' -Directory |
#               Sort-Object Name -Descending | Select-Object -First 1
#           }

#           $signtool = Join-Path $sdkBin.FullName 'x64\signtool.exe'
#           if (-not (Test-Path $signtool)) {
#             throw "signtool.exe not found under $($sdkBin.FullName). Ensure Windows SDK is installed."
#           }

#           "SIGNTOOL=$signtool" | Out-File -FilePath $env:GITHUB_ENV -Append
#           Write-Host "Using SignTool at $signtool"

#       # ---------- Signing prep: DigiCert smctl + KSP credentials ----------
#       - name: Prepare DigiCert (smctl + KSP)
#         env:
#           DIGICERT_API_KEY:              ${{ secrets.DIGICERT_API_KEY }}
#           DIGICERT_CLIENT_CERT_PFX_B64:  ${{ secrets.DIGICERT_CLIENT_CERT_PFX_B64 }}
#           DIGICERT_CLIENT_CERT_PASSWORD: ${{ secrets.DIGICERT_CLIENT_CERT_PASSWORD }}
#         run: |
#           # Find smctl from typical install paths
#           $smctlCandidates = @(
#             "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools\smctl.exe",
#             "C:\Program Files\DigiCert\DigiCert KeyLocker Tools\smctl.exe"
#           )
#           $smctl = $smctlCandidates | Where-Object { Test-Path $_ } | Select-Object -First 1
#           if (-not $smctl) { throw "smctl.exe not found. Install DigiCert Signing Manager/KeyLocker Tools on this runner." }
#           Write-Host "Using smctl at $smctl"

#           # Recreate the client-auth P12 from secret
#           $p12Path = Join-Path $env:RUNNER_TEMP "digicert-client-auth.p12"
#           [IO.File]::WriteAllBytes($p12Path, [Convert]::FromBase64String($env:DIGICERT_CLIENT_CERT_PFX_B64))

#           # Required env vars for smctl
#           $env:SM_HOST = "https://clientauth.one.digicert.com"
#           $env:SM_CLIENT_CERT_FILE = $p12Path

#           # Save API key + P12 password in Windows Credential Manager
#           & $smctl credentials save $env:DIGICERT_API_KEY $env:DIGICERT_CLIENT_CERT_PASSWORD

#           # Register the KSP (safe to re-run). If already registered, it may print 0xC0000035, which is harmless.
#           try { & $smctl windows ksp register } catch { Write-Warning $_ }

#           # Optional: show tools mapping (won't fail the build if unmapped)
#           & $smctl healthcheck --tools || $true

#       # ---------- Fetch the public certificate for your keypair ----------
#       - name: Download signing certificate
#         env:
#           DIGICERT_KEYPAIR_ALIAS: ${{ secrets.DIGICERT_KEYPAIR_ALIAS }}
#         run: |
#           $smctl = @(
#             "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools\smctl.exe",
#             "C:\Program Files\DigiCert\DigiCert KeyLocker Tools\smctl.exe"
#           ) | Where-Object { Test-Path $_ } | Select-Object -First 1

#           $outDir = $env:RUNNER_TEMP
#           & $smctl certificate download --keypair-alias $env:DIGICERT_KEYPAIR_ALIAS --format cer --out $outDir

#           $cert = Get-ChildItem $outDir -Filter *.cer | Select-Object -First 1 | % FullName
#           if (-not $cert) { throw "Failed to download .cer for keypair alias $env:DIGICERT_KEYPAIR_ALIAS" }

#           "CODESIGN_CERT=$cert" | Out-File -FilePath $env:GITHUB_ENV -Append
#           Write-Host "Downloaded signing certificate to $cert"

#       # ---------- Sign the DLL and EXE using SignTool + DigiCert KSP ----------
#       - name: Sign artifacts (DLL + EXE)
#         env:
#           DIGICERT_KEYPAIR_ALIAS: ${{ secrets.DIGICERT_KEYPAIR_ALIAS }}
#         run: |
#           $ts = "http://timestamp.digicert.com"
#           $signtool = "$env:SIGNTOOL"
#           $cert = "$env:CODESIGN_CERT"
#           $alias = "$env:DIGICERT_KEYPAIR_ALIAS"

#           & $signtool sign /fd SHA256 /tr $ts /td SHA256 `
#             /csp "DigiCert Signing Manager KSP" /kc "$alias" /f "$cert" `
#             "${{ env.LAYER_DLL }}"

#           & $signtool sign /fd SHA256 /tr $ts /td SHA256 `
#             /csp "DigiCert Signing Manager KSP" /kc "$alias" /f "$cert" `
#             "${{ env.MIRRORD_EXE }}"

#       - name: Verify signatures
#         run: |
#           & "$env:SIGNTOOL" verify /pa /all "${{ env.LAYER_DLL }}"
#           & "$env:SIGNTOOL" verify /pa /all "${{ env.MIRRORD_EXE }}"

# name: Build PR 3536 (Windows, self-hosted, minimal)

# on:
#   workflow_dispatch:

# permissions:
#   contents: read

# jobs:
#   build:
#     runs-on: [self-hosted, Windows]
#     defaults:
#       run:
#         shell: pwsh

#     steps:
#       - name: Checkout PR 3536 (merge ref)
#         uses: actions/checkout@v4
#         with:
#           ref: refs/pull/3536/merge
#           fetch-depth: 1

#       - name: Add Rust MSVC target
#         run: |
#           rustup target add x86_64-pc-windows-msvc
#       - name: Build layer-win (DLL)
#         run: |
#           cargo build -p layer-win --target x86_64-pc-windows-msvc
#       - name: Set MIRRORD_LAYER_FILE
#         run: |
#           $env:MIRRORD_LAYER_FILE = "target\x86_64-pc-windows-msvc\debug\layer_win.dll"
#           "MIRRORD_LAYER_FILE=$env:MIRRORD_LAYER_FILE" | Out-File -FilePath $env:GITHUB_ENV -Append
#       - name: Build mirrord (EXE)
#         run: |
#           cargo build -p mirrord --target x86_64-pc-windows-msvc


name: Build PR 3536 (Windows, self-hosted, minimal)

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: [self-hosted, Windows]
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout PR 3536 (merge ref)
        uses: actions/checkout@v4
        with:
          ref: refs/pull/3536/merge
          fetch-depth: 0
          submodules: recursive

      - name: Add Rust MSVC target
        run: rustup target add x86_64-pc-windows-msvc

      # Find which *package* contains the bin target named "mirrord"
      - name: Locate package for bin "mirrord" + set MIRRORD_LAYER_FILE
        run: |
          # Find the package that defines a binary target named 'mirrord'
          $meta = cargo metadata --format-version 1 --no-deps | ConvertFrom-Json
          $pkg = $meta.packages | Where-Object {
            $_.targets | Where-Object { ($_."kind" -contains 'bin') -and ($_.name -eq 'mirrord') }
          } | Select-Object -First 1

          if (-not $pkg) {
            $names = ($meta.packages | ForEach-Object name) -join ', '
            throw "No bin target named 'mirrord' found. Workspace packages: $names"
          }

          # Save the package name for the next step
          "MIRRORD_PKG=$($pkg.name)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Will build bin 'mirrord' from package: $($pkg.name)"

          # Set MIRRORD_LAYER_FILE to an *absolute* path in this workspace
          $dll = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug\layer_win.dll'
          "MIRRORD_LAYER_FILE=$dll" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "MIRRORD_LAYER_FILE=$dll"

      - name: Build mirrord
        run: cargo build -p "$env:MIRRORD_PKG" --bin mirrord --target x86_64-pc-windows-msvc

      # --- Prepare DigiCert (smctl + creds) ---
      - name: Prepare DigiCert (smctl + creds)
        env:
          DIGICERT_API_KEY:              ${{ secrets.DIGICERT_API_KEY }}
          DIGICERT_CLIENT_CERT_PFX_B64:  ${{ secrets.DIGICERT_CLIENT_CERT_PFX_B64 }}
          DIGICERT_CLIENT_CERT_PASSWORD: ${{ secrets.DIGICERT_CLIENT_CERT_PASSWORD }}
        run: |
          # Locate smctl
          $smctl = @(
            "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools\smctl.exe",
            "C:\Program Files\DigiCert\DigiCert KeyLocker Tools\smctl.exe"
          ) | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $smctl) { throw "smctl.exe not found. Install DigiCert Signing Manager/KeyLocker Tools on this runner." }
          Write-Host "Using smctl at: $smctl"

          # Recreate client-auth .p12 from secret
          $p12 = Join-Path $env:RUNNER_TEMP "digicert-client-auth.p12"
          [IO.File]::WriteAllBytes($p12, [Convert]::FromBase64String($env:DIGICERT_CLIENT_CERT_PFX_B64))

          # Required env for smctl
          $env:SM_HOST = "https://clientauth.one.digicert.com"
          $env:SM_CLIENT_CERT_FILE = $p12

          # Store creds in Windows Credential Manager
          & $smctl credentials save $env:DIGICERT_API_KEY $env:DIGICERT_CLIENT_CERT_PASSWORD

          # Register the KSP (safe to re-run)
          try { & $smctl windows ksp register } catch { Write-Warning $_ }

      # --- Locate SignTool (Windows SDK) and set artifact paths ---
      - name: Locate SignTool + set artifact paths
        run: |
          # Find latest SDK bin
          $sdkDir = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\bin' -Directory -ErrorAction SilentlyContinue |
            Sort-Object Name -Descending | Select-Object -First 1
          $signtool = $null
          if ($sdkDir) {
            $candidate = Join-Path $sdkDir.FullName 'x64\signtool.exe'
            if (Test-Path $candidate) { $signtool = $candidate }
          }
          if (-not $signtool) {
            $cmd = Get-Command signtool.exe -ErrorAction SilentlyContinue
            if ($cmd) { $signtool = $cmd.Source }
          }
          if (-not $signtool) { throw "signtool.exe not found. Install the Windows 10/11 SDK on the runner." }
          "SIGNTOOL=$signtool" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "SignTool: $signtool"

          # Absolute paths to your freshly built artifacts (Debug)
          $dll = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug\layer_win.dll'
          $exe = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug\mirrord.exe'
          if (-not (Test-Path $dll)) { throw "DLL not found at $dll" }
          if (-not (Test-Path $exe)) { throw "EXE not found at $exe" }
          "MIRRORD_LAYER_FILE=$dll" | Out-File -FilePath $env:GITHUB_ENV -Append
          "MIRRORD_EXE=$exe"        | Out-File -FilePath $env:GITHUB_ENV -Append

      # --- Sign DLL + EXE with DigiCert KeyLocker ---
      - name: Sign artifacts (DLL + EXE)
        env:
          DIGICERT_KEYPAIR_ALIAS: ${{ secrets.DIGICERT_KEYPAIR_ALIAS }}
        run: |
          $ts = "http://timestamp.digicert.com"
          $signtool = "$env:SIGNTOOL"
          $alias = "$env:DIGICERT_KEYPAIR_ALIAS"

          # Sign using DigiCert KSP + key alias (no PFX on disk; key stays in HSM)
          & $signtool sign /fd SHA256 /td SHA256 /tr $ts `
            /csp "DigiCert Signing Manager KSP" /kc "$alias" `
            "$env:MIRRORD_LAYER_FILE"

          & $signtool sign /fd SHA256 /td SHA256 /tr $ts `
            /csp "DigiCert Signing Manager KSP" /kc "$alias" `
            "$env:MIRRORD_EXE"

      # --- Verify signatures ---
      - name: Verify signatures
        run: |
          & "$env:SIGNTOOL" verify /pa /all "$env:MIRRORD_LAYER_FILE"
          & "$env:SIGNTOOL" verify /pa /all "$env:MIRRORD_EXE"
