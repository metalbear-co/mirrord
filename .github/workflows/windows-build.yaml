name: Build PR 3536 (Windows, self-hosted, minimal)

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: [self-hosted, Windows]
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout PR 3536 (merge ref)
        uses: actions/checkout@v4
        with:
          ref: refs/pull/3536/merge
          fetch-depth: 0
          submodules: recursive

      # Ensure Rust exists for the service account (idempotent)
      - name: Ensure Rust toolchain (if missing)
        run: |
          $cargo = Get-Command cargo.exe -ErrorAction SilentlyContinue
          if (-not $cargo) {
            $env:CARGO_HOME  = "$env:RUNNER_TEMP\.cargo"
            $env:RUSTUP_HOME = "$env:RUNNER_TEMP\.rustup"
            $installer = "$env:RUNNER_TEMP\rustup-init.exe"
            Invoke-WebRequest -Uri https://win.rustup.rs/x86_64 -OutFile $installer
            & $installer -y --default-host x86_64-pc-windows-msvc --profile minimal
            $env:PATH = "$env:CARGO_HOME\bin;$env:PATH"
          }
          rustup --version
          cargo --version

      - name: Add Rust MSVC target
        run: rustup target add x86_64-pc-windows-msvc

      # Build the Windows layer DLL (your crate/package name)
      - name: Build mirrord-layer-win (DLL)
        run: cargo build -p mirrord-layer-win --target x86_64-pc-windows-msvc

      # Find which package contains the bin target "mirrord" and set MIRRORD_LAYER_FILE path
      - name: Locate package for bin "mirrord" + set MIRRORD_LAYER_FILE
        run: |
          $meta = cargo metadata --format-version 1 --no-deps | ConvertFrom-Json
          $pkg = $meta.packages | Where-Object {
            $_.targets | Where-Object { ($_."kind" -contains 'bin') -and ($_.name -eq 'mirrord') }
          } | Select-Object -First 1
          if (-not $pkg) {
            $names = ($meta.packages | ForEach-Object name) -join ', '
            throw "No bin target named 'mirrord' found. Workspace packages: $names"
          }
          "MIRRORD_PKG=$($pkg.name)" | Out-File -FilePath $env:GITHUB_ENV -Append

          $dll = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug\mirrord_layer_win.dll'
          "MIRRORD_LAYER_FILE=$dll" | Out-File -FilePath $env:GITHUB_ENV -Append

          Write-Host "Will build bin 'mirrord' from package: $($pkg.name)"
          Write-Host "MIRRORD_LAYER_FILE=$dll"

      - name: Build mirrord (EXE)
        run: cargo build -p "$env:MIRRORD_PKG" --bin mirrord --target x86_64-pc-windows-msvc

      # Locate SignTool and verify artifacts exist
      - name: Export SignTool path + verify artifacts
        run: |
          $signtool = 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x64\signtool.exe'
          if (-not (Test-Path $signtool)) {
            $found = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe" -ErrorAction SilentlyContinue |
              Sort-Object FullName -Descending | Select-Object -First 1
            if ($found) { $signtool = $found.FullName }
          }
          if (-not (Test-Path $signtool)) { throw "SignTool not found." }
          "SIGNTOOL=$signtool" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Using SignTool at $signtool"

          $dll = "$env:MIRRORD_LAYER_FILE"
          $exe = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug\mirrord.exe'
          if (-not (Test-Path $dll)) { throw "DLL not found at $dll" }
          if (-not (Test-Path $exe)) { throw "EXE not found at $exe" }
          "MIRRORD_EXE=$exe" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "DLL: $dll"
          Write-Host "EXE: $exe"

      # Prepare DigiCert creds (overwrite each run) and register KSP
      - name: Prepare DigiCert creds (smctl + KSP)
        env:
          DIGICERT_API_KEY:              ${{ secrets.DIGICERT_API_KEY }}
          DIGICERT_CLIENT_CERT_PFX_B64:  ${{ secrets.DIGICERT_CLIENT_CERT_PFX_B64 }}
          DIGICERT_CLIENT_CERT_PASSWORD: ${{ secrets.DIGICERT_CLIENT_CERT_PASSWORD }}
        run: |
          # Prefer your installed Keylocker Tools path; fall back if needed
          $smctl = @(
            "C:\Program Files\DigiCert\DigiCert Keylocker Tools\smctl.exe",
            "C:\Program Files\DigiCert\DigiCert KeyLocker Tools\smctl.exe",
            "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools\smctl.exe"
          ) | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $smctl) { throw "smctl.exe not found. Ensure Keylocker Windows Clients are installed." }

          "SMCTL=$smctl" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Using smctl at: $smctl"

          # Rehydrate client-auth .p12
          $p12 = Join-Path $env:RUNNER_TEMP "client-auth.p12"
          [IO.File]::WriteAllBytes($p12, [Convert]::FromBase64String($env:DIGICERT_CLIENT_CERT_PFX_B64))

          # Required env for smctl
          $env:SM_HOST = "https://clientauth.one.digicert.com"
          $env:SM_CLIENT_CERT_FILE = $p12

          # Ensure this account uses the intended creds
          & $smctl credentials clear 2>$null
          & $smctl credentials save $env:DIGICERT_API_KEY $env:DIGICERT_CLIENT_CERT_PASSWORD

          # Register KSP (idempotent)
          try { & $smctl windows ksp register } catch { Write-Warning $_ }

          # Useful visibility:
          Write-Host "`nKeypairs visible to this user:"
          & $smctl keypair list

      # Certsync the alias, parse the SHA1 from smctl output, and detect which store it landed in
      - name: Certsync alias → export CODESIGN_SHA1 (+ store scope)
        env:
          DIGICERT_KEYPAIR_ALIAS: ${{ secrets.DIGICERT_KEYPAIR_ALIAS }}
        run: |
          $ErrorActionPreference = 'Stop'
          $smctl = "$env:SMCTL"
          $alias = "$env:DIGICERT_KEYPAIR_ALIAS".Trim()
          if (-not (Test-Path $smctl)) { throw "smctl.exe not found at $smctl" }
          if (-not $alias) { throw "DIGICERT_KEYPAIR_ALIAS is empty." }

          # Run certsync and capture stdout
          $raw = & $smctl windows certsync --keypair-alias $alias 2>&1 | Tee-Object -Variable lines
          if ($LASTEXITCODE -ne 0) {
            $msg = ($lines | Out-String)
            throw "certsync failed for alias '$alias'. Output:`n$msg"
          }

          # Try to parse "SHA1 Fingerprint: <hex>"
          $txt = ($lines | Out-String)
          $sha1 = $null
          if ($txt -match 'SHA1\s*Fingerprint:\s*([A-Fa-f0-9]+)') {
            $sha1 = $matches[1].ToUpper()
          }

          if (-not $sha1) {
            # Fallback: search CurrentUser\My for newest Code Signing with private key
            $now = Get-Date
            $pick = Get-ChildItem Cert:\CurrentUser\My | Where-Object {
              $_.HasPrivateKey -and $_.NotAfter -gt $now -and
              (($_.EnhancedKeyUsageList | ForEach-Object FriendlyName) -contains 'Code Signing')
            } | Sort-Object NotBefore -Descending | Select-Object -First 1
            if ($pick) { $sha1 = ($pick.Thumbprint -replace '\s','').ToUpper() }
          }

          if (-not $sha1) {
            Write-Host "`nCurrentUser\My (diagnostics):"
            Get-ChildItem Cert:\CurrentUser\My | Select-Object Subject, Thumbprint, NotAfter
            throw "Could not determine cert thumbprint after certsync."
          }

          # Determine if the cert is in CurrentUser or LocalMachine
          $inUser = Get-ChildItem Cert:\CurrentUser\My -ErrorAction SilentlyContinue |
            Where-Object { ($_.Thumbprint -replace '\s','').ToUpper() -eq $sha1 } |
            Select-Object -First 1
          $inMachine = $null
          if (-not $inUser) {
            $inMachine = Get-ChildItem Cert:\LocalMachine\My -ErrorAction SilentlyContinue |
              Where-Object { ($_.Thumbprint -replace '\s','').ToUpper() -eq $sha1 } |
              Select-Object -First 1
          }

          if ($inUser) {
            "CODESIGN_SHA1=$sha1"     | Out-File -FilePath $env:GITHUB_ENV -Append
            "CODESIGN_STORE_SCOPE=U"  | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "Using user-store cert (CurrentUser\My): $sha1"
          } elseif ($inMachine) {
            "CODESIGN_SHA1=$sha1"     | Out-File -FilePath $env:GITHUB_ENV -Append
            "CODESIGN_STORE_SCOPE=M"  | Out-File -FilePath $env:GITHUB_ENV -Append
            Write-Host "Using machine-store cert (LocalMachine\My): $sha1"
          } else {
            Write-Host "`nCurrentUser\My:"
            Get-ChildItem Cert:\CurrentUser\My | Select-Object Subject, Thumbprint, NotAfter
            Write-Host "`nLocalMachine\My:"
            Get-ChildItem Cert:\LocalMachine\My | Select-Object Subject, Thumbprint, NotAfter
            throw "Thumbprint $sha1 not found in either CurrentUser\My or LocalMachine\My."
          }

      # Sign using /sha1; add /sm if it’s in machine store
      - name: Sign artifacts (DLL + EXE)
        run: |
          $ErrorActionPreference = 'Stop'
          $ts = "http://timestamp.digicert.com"
          $sha1 = "$env:CODESIGN_SHA1"
          $scope = "$env:CODESIGN_STORE_SCOPE"

          if (-not $sha1) { throw "CODESIGN_SHA1 not set." }

          $common = @('/fd','SHA256','/td','SHA256','/tr',$ts,'/sha1',$sha1)
          if ($scope -eq 'M') { $common = @('/sm') + $common }  # /sm = LocalMachine store

          & "$env:SIGNTOOL" sign @common "$env:MIRRORD_LAYER_FILE"
          & "$env:SIGNTOOL" sign @common "$env:MIRRORD_EXE"

      - name: Verify signatures
        run: |
          & "$env:SIGNTOOL" verify /pa /all "$env:MIRRORD_LAYER_FILE"
          & "$env:SIGNTOOL" verify /pa /all "$env:MIRRORD_EXE"
