name: Windows tests (reuse prebuilt)

on:
  # manual + same triggers as Linux CI
  workflow_dispatch:
    inputs:
      source:
        description: 'Where to get artifacts: "gcs" (pull prebuilt) or "build" (build & sign locally)'
        type: choice
        options: [gcs, build]
        default: gcs
      bucket_uri:
        description: 'GCS bucket override (e.g., gs://mirrord-windows-builds)'
        required: false
      artifact_subpath:
        description: 'GCS subpath override (e.g., windows/mirrord-3.163.0-run70-0932953)'
        required: false
  push:
  pull_request:
    branches: [main, "*staging*"]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read

env:
  # Defaults used when not overridden by workflow_dispatch inputs
  BUCKET_URI: gs://mirrord-windows-builds
  ARTIFACT_SUBPATH: windows/mirrord-3.163.0-run70-0932953
  RUST_BACKTRACE: "1"
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  MIRRORD_TELEMETRY: "false"
  LIBCLANG_PATH: "C:\\Program Files\\LLVM\\bin"

jobs:
  windows_tests_reuse_artifact:
    runs-on: [self-hosted, Windows]
    defaults:
      run:
        shell: pwsh
    env:
      # default to GCS unless workflow_dispatch overrides it
      WINDOWS_SOURCE: gcs

    steps:
      - name: Checkout repo (tests need sources)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Apply inputs overrides
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          if ("${{ github.event.inputs.source }}" -ne "") {
            "WINDOWS_SOURCE=${{ github.event.inputs.source }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
          if ("${{ github.event.inputs.bucket_uri }}" -ne "") {
            "BUCKET_URI=${{ github.event.inputs.bucket_uri }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
          if ("${{ github.event.inputs.artifact_subpath }}" -ne "") {
            "ARTIFACT_SUBPATH=${{ github.event.inputs.artifact_subpath }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Toolchain info
        run: |
          whoami
          rustc -V
          cargo -V
          rustup show
      # If you want to pin the same nightly as Linux CI, uncomment:
      # - name: Use pinned nightly like Linux CI
      #   run: rustup default nightly-2025-08-01

      # =========================
      # === PULL PREBUILT (GCS)
      # =========================
      - name: Pick Windows artifacts from GCS (robust)
        if: ${{ env.WINDOWS_SOURCE == 'gcs' }}
        run: |
          $ErrorActionPreference = 'Stop'
          $dest = Join-Path $env:RUNNER_TEMP 'picked'
          New-Item -ItemType Directory -Path $dest -Force | Out-Null

          Write-Host "Downloading from: $env:BUCKET_URI/$env:ARTIFACT_SUBPATH/*"
          gcloud --quiet storage cp "$($env:BUCKET_URI)/$($env:ARTIFACT_SUBPATH)/*" "$dest/"
          if ($LASTEXITCODE -ne 0) { throw "gcloud cp failed (check path or perms)" }

          Write-Host "Downloaded files:"; Get-ChildItem $dest | Format-Table Name,Length

          # Use wildcarded path so -Filter actually matches; avoid -Include.
          $wild = Join-Path $dest '*'

          # exe
          $exe = (Get-ChildItem -Path $wild -Filter 'mirrord.exe' -File | Select-Object -First 1).FullName

          # dll (handle both underscore/dash names; then a generic fallback)
          $dll = (Get-ChildItem -Path $wild -Filter 'mirrord_layer_win.dll' -File | Select-Object -First 1).FullName
          if (-not $dll) { $dll = (Get-ChildItem -Path $wild -Filter 'mirrord-layer-win.dll' -File | Select-Object -First 1).FullName }
          if (-not $dll) { $dll = (Get-ChildItem -Path $wild -Filter '*layer*.dll'        -File | Select-Object -First 1).FullName }

          Write-Host "Found exe: $exe"
          Write-Host "Found dll: $dll"

          if (-not $exe -or -not $dll) {
            Write-Host "Files present:"; Get-ChildItem -Path $wild -File | Select Name,FullName | Format-Table
            throw "Did not find mirrord.exe or layer DLL under $dest"
          }

          "MIRRORD_DOWNLOADED_EXE=$exe"        | Out-File -FilePath $env:GITHUB_ENV -Append
          "MIRRORD_LAYER_FILE=$dll"            | Out-File -FilePath $env:GITHUB_ENV -Append
          "MIRRORD_TEST_USE_EXISTING_LIB=$dll" | Out-File -FilePath $env:GITHUB_ENV -Append

      # =========================
      # === BUILD & SIGN (LOCALLY)
      # =========================
      - name: Identity & DigiCert healthcheck
        if: ${{ env.WINDOWS_SOURCE == 'build' }}
        run: |
          $ErrorActionPreference = 'Stop'
          whoami
          Write-Host "SM_HOST=$env:SM_HOST"
          Write-Host "SM_CLIENT_CERT_FILE=$env:SM_CLIENT_CERT_FILE"
          smctl --version
          smctl healthcheck

      - name: Ensure Rust MSVC target
        if: ${{ env.WINDOWS_SOURCE == 'build' }}
        run: rustup target add x86_64-pc-windows-msvc

      # Build the layer FIRST so include_bytes!/env! consumers can find it.
      - name: Build mirrord-layer-win (DLL)
        if: ${{ env.WINDOWS_SOURCE == 'build' }}
        run: cargo build -p mirrord-layer-win --target x86_64-pc-windows-msvc

      - name: Locate package for bin "mirrord" + set envs (package, version, layer path)
        if: ${{ env.WINDOWS_SOURCE == 'build' }}
        run: |
          $ErrorActionPreference = 'Stop'
          $meta = cargo metadata --format-version 1 --no-deps | ConvertFrom-Json
          $pkg = $meta.packages | Where-Object {
            $_.targets | Where-Object { ($_."kind" -contains 'bin') -and ($_.name -eq 'mirrord') }
          } | Select-Object -First 1
          if (-not $pkg) {
            $names = ($meta.packages | ForEach-Object name) -join ', '
            throw "No bin target named 'mirrord' found. Workspace packages: $names"
          }

          "MIRRORD_PKG=$($pkg.name)"        | Out-File -FilePath $env:GITHUB_ENV -Append
          "MIRRORD_VERSION=$($pkg.version)" | Out-File -FilePath $env:GITHUB_ENV -Append

          $dllDbg = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug\mirrord_layer_win.dll'
          $dllRel = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\release\mirrord_layer_win.dll'
          if     (Test-Path $dllDbg) { $dll = $dllDbg }
          elseif (Test-Path $dllRel) { $dll = $dllRel }
          else   { throw "Layer DLL not found. Expected at:`n  $dllDbg`n  $dllRel" }

          "MIRRORD_LAYER_FILE=$dll" | Out-File -FilePath $env:GITHUB_ENV -Append

          Get-Item $dll | Format-List FullName,Length,LastWriteTime

      # Build the CLI AFTER the layer exists & env var is set.
      - name: Build mirrord (bin)
        if: ${{ env.WINDOWS_SOURCE == 'build' }}
        run: cargo build -p "$env:MIRRORD_PKG" --bin mirrord --target x86_64-pc-windows-msvc

      - name: Code sign mirrord.exe + layer DLL (thumbprint) + verify
        if: ${{ env.WINDOWS_SOURCE == 'build' }}
        run: |
          $ErrorActionPreference = 'Stop'

          $dbgDir = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\debug'
          $relDir = Join-Path $env:GITHUB_WORKSPACE 'target\x86_64-pc-windows-msvc\release'

          $exe = Join-Path $dbgDir 'mirrord.exe'
          if (!(Test-Path $exe)) {
            $exeRel = Join-Path $relDir 'mirrord.exe'
            if (Test-Path $exeRel) { $exe = $exeRel } else { throw "Expected mirrord.exe not found at $exe or $exeRel" }
          }

          $dllCandidates = @()
          if ($env:MIRRORD_LAYER_FILE) { $dllCandidates += $env:MIRRORD_LAYER_FILE }
          $dllCandidates += @(
            (Join-Path $dbgDir 'mirrord_layer_win.dll'),
            (Join-Path $relDir 'mirrord_layer_win.dll')
          )
          $dll = $dllCandidates | Where-Object { $_ -and (Test-Path $_) } | Select-Object -First 1
          if (-not $dll) {
            $list = ($dllCandidates | ForEach-Object { $_ }) -join [Environment]::NewLine
            throw ("Layer DLL not found. Looked for:{0}{1}" -f [Environment]::NewLine, $list)
          }

          foreach ($f in @($exe, $dll)) {
            Write-Host "Signing $f"
            & signtool.exe sign `
              /sha1 bfa0bea8d22265cb382d2d5dec55a6ffcff70bcb `
              /tr http://timestamp.digicert.com `
              /td SHA256 `
              /fd SHA256 `
              "$f"
            if ($LASTEXITCODE -ne 0) { throw "signtool sign failed for $f (exit $LASTEXITCODE)" }

            Write-Host "Verifying $f"
            & signtool.exe verify /pa "$f"
            if ($LASTEXITCODE -ne 0) { throw "signtool verify failed for $f (exit $LASTEXITCODE)" }
          }

          # Export paths so later steps are identical to the GCS path
          "MIRRORD_DOWNLOADED_EXE=$exe"        | Out-File -FilePath $env:GITHUB_ENV -Append
          "MIRRORD_LAYER_FILE=$dll"            | Out-File -FilePath $env:GITHUB_ENV -Append
          "MIRRORD_TEST_USE_EXISTING_LIB=$dll" | Out-File -FilePath $env:GITHUB_ENV -Append

      # =========================
      # Common smoke summary (works for GCS or build)
      # =========================
      - name: Quick smoke (hash + signature + --version/--help)
        run: |
          $ErrorActionPreference = 'Stop'
          $exe = $env:MIRRORD_DOWNLOADED_EXE
          $dll = $env:MIRRORD_LAYER_FILE
          $base = Split-Path $exe -Parent
          $sum = Join-Path $env:RUNNER_TEMP 'layer_win_summary.txt'
          Remove-Item $sum -ErrorAction SilentlyContinue

          function Get-ExpectedSha256([string]$shaFile) {
            if (-not (Test-Path $shaFile)) { return $null }
            $raw = Get-Content $shaFile -Raw
            return $raw.Split(" ",[System.StringSplitOptions]::RemoveEmptyEntries)[0].Trim().ToLower()
          }

          $exeShaFile = Join-Path $base 'mirrord.exe.sha256'
          $dllShaFile = Join-Path $base ((Split-Path $dll -Leaf) + '.sha256')
          if (-not (Test-Path $dllShaFile)) { $dllShaFile = Join-Path $base 'mirrord_layer_win.dll.sha256' }

          $exeHash = (Get-FileHash -Algorithm SHA256 $exe).Hash.ToLower()
          $dllHash = (Get-FileHash -Algorithm SHA256 $dll).Hash.ToLower()
          $exeExpect = Get-ExpectedSha256 $exeShaFile
          $dllExpect = Get-ExpectedSha256 $dllShaFile

          $lines = @()
          $lines += '## Windows smoke tests'
          $lines += ''
          $lines += ('**Picked EXE**: `{0}`' -f $exe)
          $lines += ('**Picked DLL**: `{0}`' -f $dll)
          $lines += ''
          $lines += '### SHA256'
          if ($exeExpect) { $lines += ('- mirrord.exe:  `{0}` (expected `{1}`) -> {2}' -f $exeHash, $exeExpect, ($(if ($exeHash -eq $exeExpect) {'OK'} else {'**MISMATCH**'}))) } else { $lines += ('- mirrord.exe:  `{0}` (no .sha256 file present)' -f $exeHash) }
          if ($dllExpect) { $lines += ('- layer dll:    `{0}` (expected `{1}`) -> {2}' -f $dllHash, $dllExpect, ($(if ($dllHash -eq $dllExpect) {'OK'} else {'**MISMATCH**'}))) } else { $lines += ('- layer dll:    `{0}` (no .sha256 file present)' -f $dllHash) }
          $lines += ''
          $lines += '### Code signing'
          if (Get-Command signtool.exe -ErrorAction SilentlyContinue) {
            & signtool.exe verify /pa $exe | Out-Null; $rcExe = $LASTEXITCODE
            & signtool.exe verify /pa $dll | Out-Null; $rcDll = $LASTEXITCODE
            $lines += ('- signtool mirrord.exe: {0}' -f ($(if ($rcExe -eq 0) {'OK'} else {"FAIL ($rcExe)"})))
            $lines += ('- signtool layer dll:   {0}' -f ($(if ($rcDll -eq 0) {'OK'} else {"FAIL ($rcDll)"})))
          } else {
            $lines += '- signtool.exe not found on PATH (skipping)'
          }
          $lines += ''
          $lines += '### CLI'
          $versionOut = & $exe --version 2>&1; $verRc = $LASTEXITCODE
          $helpOut = & $exe --help 2>&1;     $helpRc = $LASTEXITCODE
          $lines += ('- `mirrord.exe --version` exit code: {0}' -f $verRc)
          $lines += ''
          $lines += '```'
          $lines += $versionOut
          $lines += '```'
          $lines += ''
          $lines += ('- `mirrord.exe --help` exit code: {0}' -f $helpRc)
          $lines += ''
          $lines += '```'
          $lines += $helpOut
          $lines += '```'
          $lines += ''
          $lines -join "`n" | Out-File -FilePath $sum -Encoding utf8

      # ---------- Rust unit tests on Windows ----------
      - name: mirrord-layer-win UT
        run: cargo test --target x86_64-pc-windows-msvc -p mirrord-layer-win

      - name: mirrord protocol UT
        run: cargo test --target x86_64-pc-windows-msvc -p mirrord-protocol

      - name: mirrord config UT
        run: cargo test --target x86_64-pc-windows-msvc -p mirrord-config

      - name: mirrord kube UT
        run: cargo test --target x86_64-pc-windows-msvc -p mirrord-kube --all-features

      - name: mirrord intproxy UT
        run: cargo test --target x86_64-pc-windows-msvc -p mirrord-intproxy

      - name: mirrord auth UT
        run: cargo test --target x86_64-pc-windows-msvc -p mirrord-auth

      - name: mirrord operator UT
        run: cargo test --target x86_64-pc-windows-msvc -p mirrord-operator --features "crd, client"

      # Build+test CLI with the picked/built DLL embedded via env! at compile time.
      - name: mirrord CLI UT (embed the picked DLL)
        env:
          MIRRORD_LAYER_FILE: ${{ env.MIRRORD_LAYER_FILE }}
        run: cargo test --target x86_64-pc-windows-msvc -p mirrord

      # ---------- Summary to Job Summary tab ----------
      - name: Publish Windows test results (summary table, sandboxed)
        if: always()
        run: |
          $ErrorActionPreference = 'Stop'

          $exe = $env:MIRRORD_DOWNLOADED_EXE
          $dll = $env:MIRRORD_LAYER_FILE
          if (-not (Test-Path $exe)) { throw "Missing exe at $exe" }
          if (-not (Test-Path $dll)) { throw "Missing dll at $dll" }
          $base = Split-Path $exe -Parent

          function Get-ExpectedSha256([string]$shaFile) {
            if (-not (Test-Path $shaFile)) { return $null }
            $raw = Get-Content $shaFile -Raw
            $raw.Split(" ",[System.StringSplitOptions]::RemoveEmptyEntries)[0].Trim().ToLower()
          }

          # === SHA256 (and expected from .sha256) ===
          $exeShaFile = Join-Path $base 'mirrord.exe.sha256'
          $dllShaFile = Join-Path $base ((Split-Path $dll -Leaf) + '.sha256')
          if (-not (Test-Path $dllShaFile)) { $dllShaFile = Join-Path $base 'mirrord_layer_win.dll.sha256' }

          $exeHash   = (Get-FileHash -Algorithm SHA256 $exe).Hash.ToLower()
          $dllHash   = (Get-FileHash -Algorithm SHA256 $dll).Hash.ToLower()
          $exeExpect = Get-ExpectedSha256 $exeShaFile
          $dllExpect = Get-ExpectedSha256 $dllShaFile
          $shaExeOk  = ($exeExpect -and $exeHash -eq $exeExpect)
          $shaDllOk  = ($dllExpect -and $dllHash -eq $dllExpect)

          # === Code signing (if signtool exists) ===
          $sigExe = $null; $sigDll = $null
          if (Get-Command signtool.exe -ErrorAction SilentlyContinue) {
            & signtool.exe verify /pa $exe | Out-Null; $sigExe = ($LASTEXITCODE -eq 0)
            & signtool.exe verify /pa $dll | Out-Null; $sigDll = ($LASTEXITCODE -eq 0)
          }

          # === DLL load/unload check in a CHILD process (so crashes don't kill this step) ===
          $dllLoadOk = $false
          $dllCrash = $false
          $loader = @"
          try {
            Add-Type -TypeDefinition @'
          using System;
          using System.Runtime.InteropServices;
          public static class L {
            [DllImport("kernel32.dll", SetLastError=true, CharSet=CharSet.Unicode)]
            public static extern IntPtr LoadLibrary(string lpFileName);
            [DllImport("kernel32.dll", SetLastError=true)]
            public static extern bool FreeLibrary(IntPtr hModule);
          }
          '@;
            var ptr = L.LoadLibrary(@"{($dll -replace '"','""')}");
            if (ptr == IntPtr.Zero) Environment.Exit(2);
            L.FreeLibrary(ptr);
            Environment.Exit(0);
          } catch { Environment.Exit(3); }
          "@

          $loaderPath = Join-Path $env:RUNNER_TEMP 'dll_load_test.ps1'
          Set-Content -Path $loaderPath -Value $loader -Encoding UTF8

          $p = Start-Process pwsh -ArgumentList '-NoProfile','-NonInteractive','-File', $loaderPath -Wait -PassThru
          $childExit = $p.ExitCode
          if ($childExit -eq 0) { $dllLoadOk = $true }
          # Access violation typically returns 3221225477 (0xC0000005) or -1073741819 depending on signedness
          if ($childExit -eq 3221225477 -or $childExit -eq -1073741819) { $dllCrash = $true }

          # === CLI checks ===
          $verRc = $null; $verText = ""
          try { $verText = & $exe --version 2>&1; $verRc = $LASTEXITCODE } catch { $verRc = -1; $verText = $_.ToString() }
          $helpRc = $null; $helpText = ""
          try { $helpText = & $exe --help 2>&1;    $helpRc = $LASTEXITCODE } catch { $helpRc = -1; $helpText = $_.ToString() }

          # === Sizes ===
          $exeSize = (Get-Item $exe).Length
          $dllSize = (Get-Item $dll).Length

          # === Build rows ===
          $rows = @()
          $rows += [pscustomobject]@{ Check='SHA256 (exe)';  Result=($(if($shaExeOk){'✅ OK'}else{'❌ Mismatch/None'})); Notes= "hash=$exeHash expected=$exeExpect" }
          $rows += [pscustomobject]@{ Check='SHA256 (dll)';  Result=($(if($shaDllOk){'✅ OK'}else{'❌ Mismatch/None'})); Notes= "hash=$dllHash expected=$dllExpect" }
          $rows += [pscustomobject]@{ Check='Signing (exe)'; Result=($(if($sigExe -eq $true){'✅ Verified'}elseif($sigExe -eq $false){'❌ Failed'}else{'⚠️ Skipped'})); Notes= 'signtool verify /pa' }
          $rows += [pscustomobject]@{ Check='Signing (dll)'; Result=($(if($sigDll -eq $true){'✅ Verified'}elseif($sigDll -eq $false){'❌ Failed'}else{'⚠️ Skipped'})); Notes= 'signtool verify /pa' }
          $rows += [pscustomobject]@{ Check='DLL load/unload'; Result=($(if($dllLoadOk){'✅ OK'}elseif($dllCrash){'❌ Crash'}else{'❌ Failed'})); Notes= "child-exit=$childExit" }
          $rows += [pscustomobject]@{ Check='CLI --version';  Result="exit $verRc"; Notes= ($verText -split "`n")[0] }
          $rows += [pscustomobject]@{ Check='CLI --help';     Result="exit $helpRc"; Notes= ($helpText -split "`n")[0] }
          $rows += [pscustomobject]@{ Check='File sizes';     Result=''; Notes= "exe=$exeSize bytes; dll=$dllSize bytes" }

          # === Emit Markdown summary ===
          $md = @()
          $md += '### Windows test results'
          $md += ''
          $md += ('**Mode:** `{0}`  ' -f $env:WINDOWS_SOURCE)
          $md += ('**Artifact dir (when GCS):** `{0}`  ' -f $env:ARTIFACT_SUBPATH)
          $md += ('**EXE:** `{0}`  ' -f $exe)
          $md += ('**DLL:** `{0}`' -f $dll)
          $md += ''
          $md += '| Check | Result | Notes |'
          $md += '|------:|:------:|-------|'
          foreach ($r in $rows) {
            $c = ($r.Check  -replace '\|','\|')
            $res = ($r.Result -replace '\|','\|')
            $n = ($r.Notes  -replace '\r',' ' -replace '\n',' ' -replace '\|','\|')
            $md += "| $c | $res | $n |"
          }
          $md += ''
          $md += '<sub>DLL load runs in a child process to avoid crashing the job. See step logs for full outputs.</sub>'

          $md -join "`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8 -Append
