name: CI

on:
  push:
  pull_request:
    branches: [main, "*staging*"]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs on the same PR.
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  MIRRORD_TELEMETRY: false

jobs:
  towncrier_check:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install uv
        uses: astral-sh/setup-uv@v2
      - run: uv python install
      - run: uv venv
      - name: install towncrier
        run: uv pip install towncrier==23.11.0
      - name: verify newsfragment exist
        run: uv run towncrier check

  changed_files:
    runs-on: ubuntu-24.04
    # don't run CI on drafts (still runs on push)
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    outputs:
      rs_changed: ${{ steps.changed-rs.outputs.any_changed }}
      markdown_changed: ${{ steps.changed-markdown.outputs.any_changed }}
      ci_changed: ${{ steps.changed-ci.outputs.any_changed }}
      protocol_changed: ${{ steps.changed-protocol.outputs.any_changed }}
      dockerfile_changed: ${{ steps.changed-dockerfile.outputs.any_changed }}
      windows_changed: ${{ steps.changed-windows.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: get CI changes
        id: changed-ci
        uses: metalbear-co/changed-files@9200e69727eb73eb060652b19946b8a2fdfb654b
        with:
          files: |
            .github/workflows/ci.yaml

      - name: get changed rs files
        id: changed-rs
        uses: metalbear-co/changed-files@9200e69727eb73eb060652b19946b8a2fdfb654b
        with:
          files: |
            **/*.rs
            mirrord/**
            tests/**
            Cargo.toml
            Cargo.lock
            .dockerignore
            rust-toolchain.toml
            rustfmt.toml
            deny.toml
            .cargo/**

      - name: get markdown changes
        id: changed-markdown
        uses: metalbear-co/changed-files@9200e69727eb73eb060652b19946b8a2fdfb654b
        with:
          files: |
            README.md

      - name: get protocol changes
        id: changed-protocol
        uses: metalbear-co/changed-files@9200e69727eb73eb060652b19946b8a2fdfb654b
        with:
          files: |
            mirrord/protocol/**

      - name: get protocol toml changes
        id: changed-protocol-toml
        uses: metalbear-co/changed-files@9200e69727eb73eb060652b19946b8a2fdfb654b
        with:
          files: |
            mirrord/protocol/Cargo.toml

      - name: get dockerfile changes
        id: changed-dockerfile
        uses: metalbear-co/changed-files@9200e69727eb73eb060652b19946b8a2fdfb654b
        with:
          files: |
            mirrord/agent/Dockerfile
            mirrord/cli/Dockerfile

      # Detect Windows-related changes so Linux tests run when Windows code changes
      - name: get Windows-related changes
        id: changed-windows
        uses: metalbear-co/changed-files@9200e69727eb73eb060652b19946b8a2fdfb654b
        with:
          files: |
            mirrord/layer-win/**
            mirrord/str-win/**
            mirrord/**/windows/**
            mirrord/**/win32/**
            mirrord/**/win/**
            scripts/**/*.ps1
            **/*.ps1
            .github/workflows/windows-build.yaml

      - name: verify protocol bump
        run: |
          if [ "${{ steps.changed-protocol.outputs.any_changed }}" == "true" ] && [ "${{ steps.changed-protocol-toml.outputs.any_changed }}" != "true" ]; then
            echo "Error: Protocol has changed but Cargo.toml has not. Please update Cargo.toml."
            exit 1
          fi

      - name: output test
        run: |
          echo "rs_changed=${{ steps.changed-rs.outputs.any_changed }}";
          echo "markdown_changed=${{ steps.changed-markdown.outputs.any_changed }}";
          echo "ci_changed=${{ steps.changed-ci.outputs.any_changed }}";
          echo "protocol_changed=${{ steps.changed-protocol.outputs.any_changed }}";
          echo "protocol_toml_changed=${{ steps.changed-protocol-toml.outputs.any_changed }}";
          echo "dockerfile_changed=${{ steps.changed-dockerfile.outputs.any_changed }}";
          echo "windows_changed=${{ steps.changed-windows.outputs.any_changed }}";

  lint:
    runs-on: ubuntu-24.04
    needs: changed_files
    if: needs.changed_files.outputs.rs_changed == 'true'
        || needs.changed_files.outputs.ci_changed == 'true'
        || needs.changed_files.outputs.windows_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: metalbear-co/setup-protoc@3ea1d70ac22caff0b66ed6cb37d5b7aadebd4623
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - run: rm rust-toolchain.toml
      - uses: metalbear-co/setup-rust-toolchain@009cda47e1b529982a00627a40eda87b4215035a
        with:
          toolchain: nightly-2025-08-01
          components: rustfmt, clippy
          target: aarch64-unknown-linux-gnu,x86_64-unknown-linux-gnu
      - uses: actions/setup-python@v5
      - run: pip3 install --break-system-packages ziglang==0.13.0.post1 cargo-zigbuild
      - run: cargo fmt --all -- --check
      - run: cargo-zigbuild clippy --lib --bins --all-features --target x86_64-unknown-linux-gnu --tests -- -Wclippy::indexing_slicing -D warnings
      - run: cargo-zigbuild clippy --lib --bins --all-features --target aarch64-unknown-linux-gnu --tests -- -Wclippy::indexing_slicing -D warnings
      - run: cargo-zigbuild check -p mirrord-operator --features crd --target x86_64-unknown-linux-gnu

  # if the branch name matches x.x.x it's a release branch
  check_if_release_branch:
    runs-on: ubuntu-24.04
    outputs:
      release_branch: ${{ steps.release-branch.outputs.branch }}
    steps:
      - id: release-branch
        run: |
          echo "branch=$([[ "${{ github.head_ref || github.ref_name }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]  && echo "true" || echo "false" )" >> "$GITHUB_OUTPUT"
      - name: output test
        run: echo ${{ steps.release-branch.outputs.branch }}

  cargo-deny:
    needs: changed_files
    if: needs.changed_files.outputs.rs_changed == 'true'
        || needs.changed_files.outputs.ci_changed == 'true'
        || needs.changed_files.outputs.windows_changed == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: metalbear-co/cargo-deny-action@34899fc7ba81ca6268d5947a7a16b4649013fea1
        with:
          rust-version: nightly-2025-08-01

  check-rust-docs:
    runs-on: ubuntu-24.04
    needs: changed_files
    if: needs.changed_files.outputs.rs_changed == 'true'
        || needs.changed_files.outputs.ci_changed == 'true'
        || needs.changed_files.outputs.windows_changed == 'true'
    env:
      # enables the creation of a workspace index.html page.
      RUSTDOCFLAGS: "--enable-index-page -Zunstable-options -Dwarnings"
    steps:
      - uses: actions/checkout@v4
      - uses: metalbear-co/setup-protoc@3ea1d70ac22caff0b66ed6cb37d5b7aadebd4623
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: metalbear-co/setup-rust-toolchain@009cda47e1b529982a00627a40eda87b4215035a
        with:
          toolchain: nightly-2025-08-01
      # TODO(alex): `no-deps` here due to an issue in `futures-util`.
      - run: cargo doc --document-private-items --no-deps

  test_agent:
    runs-on: ubuntu-24.04
    needs: changed_files
    if: needs.changed_files.outputs.rs_changed == 'true'
        || needs.changed_files.outputs.ci_changed == 'true'
        || needs.changed_files.outputs.windows_changed == 'true'
    container:
      image: ghcr.io/metalbear-co/ci-agent-build:193d12d5d8015c1ed60b9eda30c708cb9c4653e9
    steps:
      - uses: actions/checkout@v4
      - uses: metalbear-co/setup-protoc@3ea1d70ac22caff0b66ed6cb37d5b7aadebd4623
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      # the setup rust toolchain action ignores the input if file exists.. so remove it
      - run: rm rust-toolchain.toml
      - run: rustup default nightly-2025-08-01
      - name: mirrord-agent UT
        run: cargo test --target x86_64-unknown-linux-gnu -p mirrord-agent
      - name: mirrord-agent-env UT
        run: cargo test --target x86_64-unknown-linux-gnu -p mirrord-agent-env
      - name: mirrord-agent-iptables UT
        run: cargo test --target x86_64-unknown-linux-gnu -p mirrord-agent-iptables

  test_agent_image:
    runs-on: ubuntu-24.04
    needs: changed_files
    if: needs.changed_files.outputs.rs_changed == 'true'
        || needs.changed_files.outputs.ci_changed == 'true'
        || needs.changed_files.outputs.dockerfile_changed == 'true'
        || needs.changed_files.outputs.windows_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: build and export
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: test
          file: mirrord/agent/Dockerfile
          outputs: type=docker,dest=/tmp/test.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: upload image
        uses: actions/upload-artifact@v4
        with:
          name: test
          path: /tmp/test.tar

  test_cli_image:
    runs-on: ubuntu-24.04
    needs: changed_files
    if: needs.changed_files.outputs.rs_changed == 'true'
        || needs.changed_files.outputs.ci_changed == 'true'
        || needs.changed_files.outputs.dockerfile_changed == 'true'
        || needs.changed_files.outputs.windows_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: build and export
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: cli_image
          file: mirrord/cli/Dockerfile
          outputs: type=docker,dest=/tmp/cli_image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration_tests:
    runs-on: ubuntu-24.04
    needs: [changed_files]
    if: needs.changed_files.outputs.rs_changed == 'true'
        || needs.changed_files.outputs.ci_changed == 'true'
        || needs.changed_files.outputs.windows_changed == 'true'
    steps:
      - uses: actions/checkout@v4 # Checkout the mirrord repo.
      - uses: metalbear-co/setup-rust-toolchain@009cda47e1b529982a00627a40eda87b4215035a
        with:
          target: x86_64-unknown-linux-gnu
      - run: |
          cd mirrord/layer/tests/apps/issue1123
          rustc issue1123.rs --out-dir target
      - run: |
          cd mirrord/layer/tests/apps/issue1054
          rustc issue1054.rs --out-dir target
      - run: |
          cd mirrord/layer/tests/apps/issue1458
          rustc issue1458.rs --out-dir target
      - run: |
          cd mirrord/layer/tests/apps/issue1458portnot53
          rustc issue1458portnot53.rs --out-dir target
      - run: |
          cd mirrord/layer/tests/apps/issue2058
          rustc issue2058.rs --out-dir target
      - run: |
          cd mirrord/layer/tests/apps/issue2204
          rustc issue2204.rs --out-dir target
      # For the `java_temurin_sip` test.
      - uses: metalbear-co/sdkman-action@b1f9b696c79148b66d3d3a06f7ea801820318d0f
        id: sdkman
        with:
          candidate: java
          version: 17.0.6-tem
      - run: java -version
      - uses: actions/setup-node@v3
        with:
          node-version: 24
      - run: npm install express
      - uses: actions/setup-python@v5
      - run: pip3 install --break-system-packages flask fastapi uvicorn[standard]
      # don't use "cache" for other Gos since it will try to overwrite and have bad results.
      - uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          cache-dependency-path: tests/go-e2e/go.sum
      - run: |
          go version
      - run: | # Build Go test apps.
          cd mirrord/layer/tests
          ../../../scripts/build_go_apps.sh 23
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: false
      - run: |
          go version
      - run: | # Build Go test apps.
          cd mirrord/layer/tests
          ../../../scripts/build_go_apps.sh 24
      - uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: false
      - run: |
          go version
      - run: | # Build Go test apps.
          cd mirrord/layer/tests
          ../../../scripts/build_go_apps.sh 25
      - run: |
          cd mirrord/layer/tests/apps/fileops
          cargo build
      - run: |
          cd mirrord/layer/tests/apps/outgoing
          cargo build
      - run: |
          cd mirrord/layer/tests/apps/recv_from
          cargo build
      - run: |
          cd mirrord/layer/tests/apps/dns_resolve
          cargo build
      - run: |
          cd mirrord/layer/tests/apps/listen_ports
          cargo build
      - run: |
          cd mirrord/layer/tests/apps/issue1776
          cargo build
      - run: |
          cd mirrord/layer/tests/apps/issue1776portnot53
          cargo build
      - run: |
          cd mirrord/layer/tests/apps/issue1899
          cargo build
      - run: |
          cd mirrord/layer/tests/apps/issue2001
          cargo build
      - run: |
          cd mirrord/layer/tests/apps/issue2438
          cargo build
      - run: |
          cd mirrord/layer/tests/apps/issue3248
          cargo build
      - run: |
          cd mirrord/layer/tests/apps/rebind0
          cargo build
      - run: ./scripts/build_c_apps.sh
      - run: cargo test --target x86_64-unknown-linux-gnu -p mirrord-layer
      - name: mirrord protocol UT
        run: cargo test --target x86_64-unkn_