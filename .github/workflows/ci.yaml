name: CI

on:
  workflow_dispatch:
  push:
    branches: [main, v2.0]
  pull_request:
    branches: [main, v2.0]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v1
      # Needed for agent
      - run: sudo apt install libpcap-dev cmake
      - run: cargo fmt --all -- --check
      - run: cargo clippy -- -D warnings

  test_mirrord_protocol:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{matrix.target}}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{matrix.os}}
      - run: |
          cd mirrord-protocol
          cargo test
  test_agent:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - run: sudo apt install -y libpcap-dev cmake
      - run: sudo PATH=/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin:/usr/bin:/usr/sbin /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo test -p mirrord-agent

  test_agent_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v2
      - name: build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          tag: test
          file: mirrord-agent/Dockerfile
          outputs: type=docker,dest=/tmp/test.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: upload image
        uses: actions/upload-artifact@v2
        with:
          name: test
          path: /tmp/test.tar

  test_mirrord_layer_cli:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-18.04, macos-12, macos-11, macos-10.15]
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin]
        exclude:
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: ubuntu-18.04
            target: x86_64-apple-darwin
          - os: ubuntu-18.04
            target: aarch64-apple-darwin
          - os: macos-12
            target: x86_64-unknown-linux-gnu
          - os: macos-11
            target: aarch64-apple-darwin
          - os: macos-11
            target: x86_64-unknown-linux-gnu
          - os: macos-10.15
            target: aarch64-apple-darwin
          - os: macos-10.15
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{matrix.target}}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{matrix.os}}-${{matrix.target}}
      # For now, just verify it compiles.
      - run: cargo +nightly build -p mirrord-layer -p mirrord --target=${{matrix.target}}

  build_mirrord:
    runs-on: ubuntu-latest
    name: build mirrord
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
        with:
          key: ubuntu-latest
      - run: sudo apt install -y libpcap-dev cmake
      - run: cargo +nightly build --manifest-path=./Cargo.toml

  e2e:
    runs-on: ubuntu-latest
    name: e2e
    needs: [build_mirrord, test_agent_image]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
        with:
          key: ubuntu-latest
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - run: npm install express
      - run: |
          sudo apt-get update -y
          sudo apt-get install -y libpcap-dev cmake
      - uses: actions/setup-python@v3
      - run: pip3 install flask
      - name: start minikube
        uses: medyagh/setup-minikube@master
        with:
          container-runtime: containerd
      - name: download image
        uses: actions/download-artifact@v2
        with:
          name: test
          path: /tmp
      - name: load image
        run: docker load --input /tmp/test.tar
      - run: docker image tag $(docker images | awk '{print $3}' | awk 'NR==2') test:latest
      - run: minikube image load test:latest
      - name: setup http-echo
        run: kubectl apply -f tests/app.yaml
      - name: cargo test
        run: cargo test --package tests --lib -- tests --nocapture --test-threads 1
      - name: switch minikube runtime
        run: |
          minikube delete
          minikube start --container-runtime=docker
          minikube image load test:latest
      - name: setup http-echo
        run: kubectl apply -f tests/app.yaml
      - name: wait for http-echo pod
        run: kubectl wait --for=condition=ready pod -l app=http-echo --timeout=20s
      - name: test with docker runtime
        run: cargo test --package tests --lib -- tests --nocapture --test-threads 1
