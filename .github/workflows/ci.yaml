name: CI

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - "vscode-ext/**"
      - "intellij-ext/**"
      - "CHANGELOG.md"

  pull_request:
    branches: [main]
    paths-ignore:
      - "vscode-ext/**"
      - "intellij-ext/**"
      - "CHANGELOG.md"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v1
      # Needed for agent
      - run: sudo apt install libpcap-dev cmake
      - run: cargo fmt --all -- --check
      - run: cargo clippy -- -D warnings

  test_mirrord_protocol:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{matrix.target}}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{matrix.os}}
      - run: |
          cd mirrord-protocol
          cargo test
  test_agent:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - run: sudo apt install -y libpcap-dev cmake
      - run: sudo PATH=/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin:/usr/bin:/usr/sbin /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo test -p mirrord-agent

  test_mirrord_layer:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{matrix.target}}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{matrix.os}}
      - run: |
          cargo test -p mirrord-layer

  test_agent_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v2
      - name: build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          tags: test
          file: mirrord-agent/Dockerfile
          outputs: type=docker,dest=/tmp/test.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: upload image
        uses: actions/upload-artifact@v2
        with:
          name: test
          path: /tmp/test.tar

  test_mirrord_layer_cli:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12, macos-11]
        target:
          [x86_64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin]
        exclude:
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: macos-12
            target: x86_64-unknown-linux-gnu
          - os: macos-11
            target: aarch64-apple-darwin
          - os: macos-11
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{matrix.target}}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{matrix.os}}-${{matrix.target}}
      # For now, just verify it compiles.
      - run: cargo +nightly build -p mirrord-layer -p mirrord --target=${{matrix.target}}

  build_mirrord:
    runs-on: ubuntu-latest
    name: build mirrord
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
        with:
          key: ubuntu-latest
      - run: sudo apt install -y libpcap-dev cmake
      - run: cargo +nightly build --manifest-path=./Cargo.toml

  e2e:
    runs-on: ubuntu-latest
    name: e2e
    needs: [build_mirrord, test_agent_image]
    env:
      MIRRORD_AGENT_RUST_LOG: "warn,mirrord=debug"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
        with:
          key: ubuntu-latest
          cache-on-failure: true

      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - run: npm install express
      - run: |
          sudo apt-get update -y
          sudo apt-get install -y libpcap-dev cmake
      - uses: actions/setup-python@v3
      - run: pip3 install flask
      - run: pip3 install fastapi
      - run: pip3 install uvicorn[standard]
      - uses: actions/setup-go@v3
        with:
          go-version: "1.18.0"
      - run: |
          cd tests/go-e2e
          go build -o 18
      - run: |
          cd tests/go-e2e-fileops
          go build -o 18
      - run: |
          cd tests/go-e2e-env
          go build -o 18
      - run: |
          cd tests/go-e2e-outgoing
          go build -o 18
      - run: |
          cd tests/go-e2e-dns
          go build -o 18
      - uses: actions/setup-go@v3
        with:
          go-version: "1.19.0"
      - run: |
          cd tests/go-e2e
          go build -o 19
      - run: |
          cd tests/go-e2e-fileops
          go build -o 19
      - run: |
          cd tests/go-e2e-env
          go build -o 19
      - run: |
          cd tests/go-e2e-outgoing
          go build -o 19
      - run: |
          cd tests/go-e2e-dns
          go build -o 19
      - name: start minikube
        uses: medyagh/setup-minikube@master
        with:
          container-runtime: containerd
      - name: download image
        uses: actions/download-artifact@v2
        with:
          name: test
          path: /tmp
      - run: minikube image load /tmp/test.tar
      - name: cargo test
        run: cargo test -p tests
      - name: switch minikube runtime
        run: |
          minikube delete
          minikube start --container-runtime=docker
          minikube image load /tmp/test.tar
      - name: test with docker runtime
        run: cargo test -p tests
      - name: Collect logs
        if: ${{ failure() }}
        run: |
          kubectl describe pods
          docker exec minikube find /var/log/pods -print -exec cat {} \;

  e2e_macos:
    runs-on: macos-12
    name: e2e macOS
    needs: [build_mirrord, test_agent_image]
    env:
      MIRRORD_AGENT_RUST_LOG: "warn,mirrord=debug"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
        with:
          key: macos-latest
          cache-on-failure: true
      - run: npm install express
      - uses: actions/setup-python@v3
      - run: pip3 install flask
      - run: pip3 install fastapi
      - run: pip3 install uvicorn[standard]
      - name: setup cluster requirements
        run: brew install docker colima kubectl
      - name: create cluster
        run: colima start --kubernetes --network-address --cpu 3 --memory 8
      - name: download image
        uses: actions/download-artifact@v2
        with:
          name: test
          path: /tmp
      - name: load image
        run: docker load --input /tmp/test.tar
      - name: cargo test
        run: cargo test -p tests test_mirror_http_traffic
      - name: Collect container logs
        if: ${{ failure() }}
        run: for CONTAINER in $(docker ps --format "{{.ID}}"); do echo $CONTAINER && docker logs $CONTAINER; done

  build_binaries:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            extension: so
            target: x86_64-unknown-linux-gnu
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{matrix.target}}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{matrix.target}}-${{matrix.os}}
      - name: build mirrord-layer and cli
        run: cargo +nightly build --release -p mirrord -p mirrord-layer --target=${{matrix.target}}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.target}}
          path: |
            target/${{matrix.target}}/release/mirrord
            target/${{matrix.target}}/release/libmirrord_layer.${{matrix.extension}}
          if-no-files-found: error

  build_binaries_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: aarch64-apple-darwin
      - uses: Swatinem/rust-cache@v1
      # - name: Import Code-Signing Certificates
      #   uses: Apple-Actions/import-codesign-certs@v1
      #   with:
      #     # The certificates in a PKCS12 file encoded as a base64 string
      #     p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
      #     # The password used to import the PKCS12 file.
      #     p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      # - name: Install gon via HomeBrew for code signing and app notarization
      #   run: |
      #     brew tap mitchellh/gon
      #     brew install mitchellh/gon/gon
      - name: build mirrord-layer x86-64
        run: cargo +nightly build --release -p mirrord-layer --target=x86_64-apple-darwin
      - name: build mirrord-layer macOS arm/arm64e
        # Editing the arm64 binary, since arm64e can be loaded into both arm64 & arm64e
        # >> target/debug/libmirrord_layer.dylib: Mach-O 64-bit dynamically linked shared library arm64
        # >> magic bits: 0000000 facf feed 000c 0100 0000 0000 0006 0000
        # >> After editing using dd -
        # >> magic bits: 0000000 facf feed 000c 0100 0002 0000 0006 0000
        # >> target/debug/libmirrord_layer.dylib: Mach-O 64-bit dynamically linked shared library arm64e
        run: |
          cargo +nightly build --release -p mirrord-layer --target=aarch64-apple-darwin
          cp target/aarch64-apple-darwin/release/libmirrord_layer.dylib target/aarch64-apple-darwin/release/libmirrord_layer_arm64e.dylib
          printf '\x02' | dd of=target/aarch64-apple-darwin/release/libmirrord_layer_arm64e.dylib bs=1 seek=8 count=1 conv=notrunc
          codesign -s - target/aarch64-apple-darwin/release/libmirrord_layer_arm64e.dylib
      # - name: Sign layer binaries
      #   env:
      #     AC_USERNAME: ${{ secrets.APPLE_DEVELOPER }}
      #     AC_PASSWORD: ${{ secrets.APPLE_DEVELOPER_PASSWORD }}
      #   run: gon -log-level=debug -log-json .github/workflows/arch_dylib_sign.json
      - name: create universal target dir
        run: mkdir -p /tmp/target/universal-apple-darwin/release
      - name: create universal dylib
        run: lipo -create -output /tmp/target/universal-apple-darwin/release/libmirrord_layer.dylib target/aarch64-apple-darwin/release/libmirrord_layer.dylib target/x86_64-apple-darwin/release/libmirrord_layer.dylib target/aarch64-apple-darwin/release/libmirrord_layer_arm64e.dylib
      # - name: Sign layer universal
      #   env:
      #     AC_USERNAME: ${{ secrets.APPLE_DEVELOPER }}
      #     AC_PASSWORD: ${{ secrets.APPLE_DEVELOPER_PASSWORD }}
      #   run: gon -log-level=debug -log-json .github/workflows/universal_dylib_sign.json
      - name: build macOS arm cli with universal dylib
        env:
          MIRRORD_LAYER_FILE: /tmp/target/universal-apple-darwin/release/libmirrord_layer.dylib
        run: cargo +nightly build --release -p mirrord --target=aarch64-apple-darwin
      - name: build macOS x86-64 cli with universal dylib
        env:
          MIRRORD_LAYER_FILE: /tmp/target/universal-apple-darwin/release/libmirrord_layer.dylib
        run: cargo +nightly build --release -p mirrord --target=x86_64-apple-darwin
      # - name: Sign cli binaries
      #   env:
      #     AC_USERNAME: ${{ secrets.APPLE_DEVELOPER }}
      #     AC_PASSWORD: ${{ secrets.APPLE_DEVELOPER_PASSWORD }}
      #   run: gon -log-level=debug -log-json .github/workflows/arch_cli_sign.json
      - name: create universal macOS cli
        run: lipo -create -output /tmp/target/universal-apple-darwin/release/mirrord target/aarch64-apple-darwin/release/mirrord target/x86_64-apple-darwin/release/mirrord
      # - name: Sign universal cli
      #   env:
      #     AC_USERNAME: ${{ secrets.APPLE_DEVELOPER }}
      #     AC_PASSWORD: ${{ secrets.APPLE_DEVELOPER_PASSWORD }}
      #   run: gon -log-level=debug -log-json .github/workflows/universal_cli_sign.json
      - name: adjust directory layout for upload
        run: cp -rf /tmp/target .
      - uses: actions/upload-artifact@v3
        with:
          name: universal-apple-darwin
          path: |
            target/universal-apple-darwin/release/mirrord
            target/universal-apple-darwin/release/libmirrord_layer.dylib
            target/universal-apple-darwin/release/mirrord
            target/aarch64-apple-darwin/release/libmirrord_layer.dylib
            target/x86_64-apple-darwin/release/libmirrord_layer.dylib
            target/aarch64-apple-darwin/release/libmirrord_layer_arm64e.dylib
          if-no-files-found: error

  release_docker_image:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get release version
        run: |
          echo "::set-output name=version::$(grep -m 1 version Cargo.toml | cut -d' ' -f3 | tr -d '\"')"
        id: version
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: mirrord-agent/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
