name: CI

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - 'vscode-ext/**'
      - 'intellij-ext/**'
      - 'CHANGELOG.md'

  pull_request:
    branches: [main]
    paths-ignore:
      - 'vscode-ext/**'
      - 'intellij-ext/**'
      - 'CHANGELOG.md'


jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v1
      # Needed for agent
      - run: cargo fmt --all -- --check
      - run: cargo clippy -- -D warnings

  test_mirrord_protocol:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{matrix.target}}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{matrix.os}}
      - run: |
          cd mirrord-protocol
          cargo test

  test_mirrord_config:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{matrix.target}}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{matrix.os}}
      - run: |
          cargo test -p mirrord-config

  test_agent:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - run: sudo PATH=/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin:/usr/bin:/usr/sbin /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo test -p mirrord-agent

  test_mirrord_layer:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{matrix.target}}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{matrix.os}}
      - run: |
          cargo test -p mirrord-layer --lib

  test_agent_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v2
      - name: build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          tags: test
          file: mirrord-agent/Dockerfile
          outputs: type=docker,dest=/tmp/test.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: upload image
        uses: actions/upload-artifact@v2
        with:
          name: test
          path: /tmp/test.tar

  test_mirrord_layer_cli:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12, macos-11]
        target:
          [x86_64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin]
        exclude:
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: macos-12
            target: x86_64-unknown-linux-gnu
          - os: macos-11
            target: aarch64-apple-darwin
          - os: macos-11
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{matrix.target}}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{matrix.os}}-${{matrix.target}}
      # For now, just verify it compiles.
      - run: cargo +nightly build -p mirrord-layer -p mirrord --target=${{matrix.target}}

  build_mirrord:
    runs-on: ubuntu-latest
    name: build mirrord
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
        with:
          key: ubuntu-latest
      - run: cargo +nightly build --manifest-path=./Cargo.toml
      - name: upload layer
        uses: actions/upload-artifact@v3
        with:
          name: layer-lib
          path: target/debug/libmirrord_layer.so
          if-no-files-found: error

  integration_tests:
    runs-on: ubuntu-latest
    needs: [build_mirrord]
    env:
      MIRRORD_TEST_USE_EXISTING_LIB: ../target/debug/libmirrord_layer.so
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: x86_64-unknown-linux-gnu
      - uses: Swatinem/rust-cache@v1
        with:
          key: ubuntu-latest
          cache-on-failure: true
      - uses: actions/setup-python@v3
      - run: pip3 install flask
      - name: download layer
        uses: actions/download-artifact@v3
        with:
          name: layer-lib
          path: target/debug/
      - run: cargo +nightly test --test integration

  integration_tests_macos:
    runs-on: macos-12
    env:
      MIRRORD_TEST_USE_EXISTING_LIB: ../target/debug/libmirrord_layer.dylib
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: x86_64-apple-darwin
      - uses: Swatinem/rust-cache@v1
        with:
          key: macos-12
          cache-on-failure: true
      - run: npm install express
      - uses: actions/setup-python@v3
      - run: pip3 install flask
      - run: cargo +nightly build -p mirrord-layer
      - run: cargo +nightly test --test integration

  e2e:
    runs-on: ubuntu-latest
    name: e2e
    needs: [build_mirrord, test_agent_image, integration_tests]
    env:
      MIRRORD_AGENT_RUST_LOG: "warn,mirrord=debug"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
        with:
          key: ubuntu-latest
          cache-on-failure: true

      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - run: npm install express
      - uses: actions/setup-python@v3
      - run: pip3 install flask
      - run: pip3 install fastapi
      - run: pip3 install uvicorn[standard]
      - uses: actions/setup-go@v3
        with:
          go-version: "1.18.0"
      - run: |
          cd tests/go-e2e
          go build -o 18
      - run: |
          cd tests/go-e2e-fileops
          go build -o 18
      - run: |
          cd tests/go-e2e-env
          go build -o 18
      - run: |
          cd tests/go-e2e-outgoing
          go build -o 18
      - run: |
          cd tests/go-e2e-dns
          go build -o 18
      - uses: actions/setup-go@v3
        with:
          go-version: "1.19.0"
      - run: |
          cd tests/go-e2e
          go build -o 19
      - run: |
          cd tests/go-e2e-fileops
          go build -o 19
      - run: |
          cd tests/go-e2e-env
          go build -o 19
      - run: |
          cd tests/go-e2e-outgoing
          go build -o 19
      - run: |
          cd tests/go-e2e-dns
          go build -o 19
      - run: |
          cd tests/rust-e2e-fileops
          cargo build
      - name: start minikube
        uses: medyagh/setup-minikube@master
        with:
          container-runtime: containerd
      - name: download image
        uses: actions/download-artifact@v2
        with:
          name: test
          path: /tmp
      - run: minikube image load /tmp/test.tar
      - name: cargo test
        run: cargo test -p tests
      - name: switch minikube runtime
        run: |
          minikube delete
          minikube start --container-runtime=docker
          minikube image load /tmp/test.tar
      - name: test with docker runtime
        run: cargo test -p tests
      - name: Collect logs
        if: ${{ failure() }}
        run: |
          kubectl describe pods
          docker exec minikube find /var/log/pods -print -exec cat {} \;

  e2e_macos:
    runs-on: macos-12
    name: e2e macOS
    needs: [build_mirrord, test_agent_image, integration_tests_macos]
    env:
      MIRRORD_AGENT_RUST_LOG: "warn,mirrord=debug"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
        with:
          key: macos-latest
          cache-on-failure: true
      - run: npm install express
      - uses: actions/setup-python@v3
      - run: pip3 install flask
      - run: pip3 install fastapi
      - run: pip3 install uvicorn[standard]
      - name: setup cluster requirements
        run: brew install docker colima kubectl
      - name: create cluster
        run: colima start --kubernetes --network-address --cpu 3 --memory 8
      - name: download image
        uses: actions/download-artifact@v2
        with:
          name: test
          path: /tmp
      - name: load image
        run: docker load --input /tmp/test.tar
      - name: cargo test
        run: cargo test -p tests test_mirror_http_traffic
      - name: Collect container logs
        if: ${{ failure() }}
        run: for CONTAINER in $(docker ps --format "{{.ID}}"); do echo $CONTAINER && docker logs $CONTAINER; done
