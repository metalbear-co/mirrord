name: CI

on:
  workflow_dispatch:
  push:
    branches-ignore: [staging-squash-merge.tmp]
  pull_request:
    branches: [main, staging, trying]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs on the same PR.
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  towncrier_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: install towncrier
        run: pip install towncrier
      - name: verify newsfragment exist
        run: towncrier check

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: |
          npm install --no-package-lock --no-save eslint
          npm run lint

  e2e:
    runs-on: ubuntu-latest
    env:
      CI_BUILD_PLUGIN: "true"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          npm install
      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          container-runtime: docker
      - run: |
          minikube image load /tmp/test.tar                    
          kubectl apply -f sample/kubernetes/app.yaml          
          echo "POD_TO_SELECT=$(kubectl get pods -o=name | head -n 1)" >> "$GITHUB_ENV"
          kubectl wait --for=condition=ready --timeout=30s $(kubectl get pods -o=name | head -n 1)          
          KUBE_SERVICE=$(minikube service list --output=json | jq -r '.[] | select(.Name == "py-serv") | .URLs[0]')
          echo "$KUBE_SERVICE"
          echo "KUBE_SERVICE=$KUBE_SERVICE" >> "$GITHUB_ENV"
      # we can't run chrome like apps in the CI, we use a virtual frame buffer:
      # refer: http://elementalselenium.com/tips/38-headless
      - name: Run vscode e2e in headless state
        uses: coactions/setup-xvfb@v1
        env:
          POD_TO_SELECT: ${{ env.POD_TO_SELECT }}
          KUBE_SERVICE: ${{ env.KUBE_SERVICE }}
        with:
          run: npm run test
  # We need some "accummulation" job here because bors fails (timeouts) to
  # listen on matrix builds.
  # Hence, we have some kind of dummy here that bors can listen on
  ci-success:
    name: ci
    # We want this to run even if some of the required jobs got skipped
    if: always()
    needs: [towncrier_check, e2e, lint]
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        # We have to do it in the shell since if it's in the if condition
        # then skipping is considered success by branch protection rules
        env:
          CI_SUCCESS: ${{ (needs.e2e.result == 'success') &&
            (needs.towncrier_check.result == 'success') &&
            (needs.lint.result == 'success')
        run: echo $CI_SUCCESS && if [ "$CI_SUCCESS" == "true" ]; then echo "SUCCESS" && exit 0; else echo "Failure" && exit 1; fi
